#!/usr/bin/env sh
#
# fyr  - 2019 (c) MIT | /bin/sh mpvc
# gmt4 - 2022 | fork & contributions
# control mpv remotely using JSON ipc
# https://mpv.io/manual/master/#json-ipc
#

PROGNAME=${0##*/}
PROGVERSION="v1.4"
PROGAUTHOR=gmt4
PROGURL="https://github.com/gmt4/mpvc"
SITEURL="https://gmt4.github.io/mpvc"

set -euf

usage() {
    cat >&2 << EOF
usage: $PROGNAME args # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL
    -a | --add          : Add media to playlist (see --load for stdin).
    -s | --stop         : Always stop playback.
    -P | --play         : Always start playback.
    -p | --toggle       : Toggle playback.
       | --next         : Jump to next entry in the playlist
       | --prev         : Jump to previous entry in the playlist
    -i | --playlist     : Print filenames of tracks to fit within terminal.
    -I | --fullplaylist : Print all filenames of tracks in current playlist.
    -v | --vol          : Increase/decrease volume relative to current volume.
    -h | --help         : Prints the short help.
    -H | --long-help    : Prints the long help.
EOF

    [ $# -gt 0 ] && cat >&2 << EOF
    -f | --format       : Enter a formatting string.
    -j | --track        : Go forwards/backwards through the playlist queue.
    -J | --tracknum     : Jump to playlist item number.
    -A | --playnext     : Add files to playlist after the current track.
    -o | --save         : Save current playlist to given path.
    -l | --load         : Load playlist from given path (stdin if none is specified).
    -o | --autosave     : Auto save current playlist to ${MPVC_PLAYLIST##$HOME/}.
    -l | --autoload     : Auto load playlist from ${MPVC_PLAYLIST##$HOME/}.
    -l | --lsplaylists  : List playlist from ${MPVC_PLAYLIST##$HOME/}.
    -c | --crop         : Clear the playlist except for the file currently playing.
    -z | --shuffle      : Shuffle the current playlist.
    -l | --loop         : Loop currently playing playlist.
    -L | --loopfile     : Loop currently playing file.
    -m | --mute         : Toggle sound.
    -t | --seek         : Increase/decrease playback time relatively, accepts % values.
    -T | --time         : Set absolute playback time.
    -x | --speed        : Increase/decrease speed relative to the current speed.
    -X | --speedval     : Set absolute speed.
    -I | --image        : Enable adding of images to the queue.
    -k | --kill         : Kill the mpv process controlling the given socket.
    -K | --killall      : Kill all mpv processes indiscriminately.
    -S | --socket       : Set mpv socket [default: $MPVC_SOCKET].
    -q | --quiet        : Suppress all text output.
    -V | --volume       : Set absolute volume.
    -Q | --vid=no       : Start mpv with video output disabled.
    -- |                : After adding files options after -- are passed to mpv.
       | --version      : Prints the $PROGNAME version.

    get                 : Get MPV property from $PROGNAME socket.
    set                 : Set MPV property from $PROGNAME socket.
    getr                : Get JSON MPV property from $PROGNAME socket.
    setr                : Set JSON MPV property from $PROGNAME socket.
    cmd                 : Send command to $PROGNAME socket.
    cmdr                : Send command to $PROGNAME socket & retrieve raw JSON.
    sockcmd             : Send MPV JSON IPC command to $PROGNAME socket.
    socklist            : List $PROGNAME sockets.
    togglec             : Toggle MPV cache property.
    togglev             : Toggle MPV video property.
    togglew             : Toggle MPV window property.
    togglei             : Toggle MPV idle property.
    cycle               : Toggle/Cycle through MPV property values.
    idleloop            : Listen to MPV player events on $PROGNAME socket.
    search              : Search the playlist by filename/url.
    -n | --searchplay   : Search the playlist by filename and play the first match.
    -N | --searchPlay   : Search the playlist by title and play the first match.
    -R | --searchrm     : Search the playlist and remove matching entries.
    -M | --searchmv     : Search the playlist and move matching entries.
    stash               : Manage mpv playing state as in git-stash(1)
    delay               : Sleep delay, as in: $PROGNAME play 0 delay seek 20% vol 60

Formatting:
    \`$PROGNAME --format\` will interpret the following delimiters if they are found:

    %name%, %path%, %dir%, %title%, %artist%, %album%, %albumartist%, comment%,
    %genre%, %year%, %percentage%, %playlistlength%, %position%, %repeat%,
    %single, %status%, %time%, %precisetime%, %speed%, %length%, %remaining%,
    %volume%, %muted%, %frame%, %width%, %height%, %ab-loop-a%, %ab-loop-b%
    %video%, %aspect%, %force-window%, %fullscreen%, %idle%, %chapter%, %chapters%

MPC compatibility layer:
    mpvc features a nearly complete compatibility layer for mpc commands in
    addition to GNU style arguments. https://linux.die.net/man/1/mpc

Exit codes:
    0: Program ran succesfully.
    1: Input Argument error.
    2: Socket does not exist.
    3: Socket is not currently open.
    4: Dependency error.
EOF
}

equiet() { "$@" 2> /dev/null; }
oquiet() { "$@" 1> /dev/null; }
quiet()  { "$@" > /dev/null 2>&1; }
quietcheck(){ if [ "${QUIETFLAG:-}" = "true" ]; then quiet "$@"; else "$@"; fi; }

warn() { echo "$@" >&2; }
die()  { e=$1; shift; warn "$@"; exit "$e"; }

mpvc_defaults()
{
    XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"}
    MPVC_CACHE_DIR="${MPVC_CACHE_DIR:-$XDG_CACHE_HOME/mpvc}"

    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
    MPVC_CONFIG_DIR="${MPVC_CONFIG_DIR:-$XDG_CONFIG_HOME/mpvc}"
    MPVC_STASH_DIR="${MPVC_STASH_DIR:-$MPVC_CONFIG_DIR/stash}"

    MPVC_DATABASE="${MPVC_DATABASE:-$MPVC_CONFIG_DIR/db.m3u}"
    MPVC_PLAYLIST="${MPVC_PLAYLIST:-$MPVC_CONFIG_DIR/playlist}"
    MPVC_CONFIG="${MPVC_CONFIG:-$XDG_CONFIG_HOME/mpvc/mpvc.conf}"
    MPVC_SOCKET="${MPVC_SOCKET:-$MPVC_CONFIG_DIR/mpvsocket0}"
    MPVC_CURL_CACHE="${MPVC_CURL_CACHE:-$MPVC_CONFIG_DIR/curl-cache.txt}"
    MPVOPTIONS="${MPVOPTIONS:---no-audio-display --no-input-terminal}"
    MPVC_MPV="${MPVC_MPV:-mpv}"
    MPVC_SOCAT="${MPVC_SOCAT:-socat}"

    QUIETFLAG="${QUIETFLAG:-}"
    MPVC_LOCAL_CACHE="${MPVC_LOCAL_CACHE:-false}"
    FORMATSTRING="${FORMATSTRING:-}"

    # print default status of mpv instance
    [ -z "$FORMATSTRING" ] && FORMATSTRING="\
%artist% - %title% NL\
[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%%) NL\
speed:%speed%x volume:%volume%%% muted:%muted% repeat:%repeat% single:%single% NL\
video:%video% aspect:%aspect% window:%force-window% fullscreen:%fullscreen% idle:%idle% NL\
chapter:%chapter% %=chapter%/%chapters%"
}

# Load user config
mpvc_config()
{
    mpvc_defaults
    # if not present, create config dir
    [ ! -d "$MPVC_CONFIG_DIR" ] && mkdir -p "$MPVC_CONFIG_DIR"
    [ ! -d "$MPVC_CACHE_DIR" ] && mkdir -p "$MPVC_CACHE_DIR"
    [ ! -d "$MPVC_STASH_DIR" ] && mkdir -p "$MPVC_STASH_DIR"
    [ ! -d "$MPVC_PLAYLIST" ] && mkdir -p "$MPVC_PLAYLIST"
    # if not present, create config files
    [ ! -e "$MPVC_CURL_CACHE" ] && > "$MPVC_CURL_CACHE"
    # if present load user config
    if [ -r "$MPVC_CONFIG" ]; then
        . "$MPVC_CONFIG"
    fi
}

mpvc_tac()
{
    awk '
        NR == 1 { lines=$0 }
        NR  > 1 { lines=$0"\n"lines }
        END     { print lines }
    ' "$@"
}

## Retrieval Functions ########################################################

mpvc_curl_cache()
{
    k=$2
    v="$( awk -F'\t' -v k="$k" '{ if ($1 == k) {print $2; exit} }' "$MPVC_CURL_CACHE" )"

    if [ "${#v}" -eq 0 ]; then
        v=$(curl "$@")
        o=$(cat "$MPVC_CURL_CACHE") # append at the top in 2023 :-)
        (echo "$k	$v"; echo "$o") > "$MPVC_CURL_CACHE"
    fi
    echo "$v"
}

mpvc_curl_cache_json()
{
    # query invidi.us API
    mpvc_curl_cache -sL "https://youtube.com/oembed?url=$1"
}

mpvc_curl_cache_title()
{
    mpvc_curl_cache_json "$@" | mpvc_getjson 'title'
}

# fn args: given a file/url return its title (may use curl to query YT)
mpvc_curl_cache_title_clean() {
    filename="${1:-}"
    result="${1:-}"
    case "$filename" in
        https://youtu.be/watch*)
            filename="$(echo "$filename" | sed 's|/watch?v=|/|')"
            result="$(mpvc_curl_cache_title "$filename")"
            ;;
        https://youtu.be/*|https://youtube.com/*|https://www.youtube.com/*)
            result="$(mpvc_curl_cache_title "$filename")"
            ;;
        https://yewtu.be/watch*)
            filename="$(echo "$filename" | sed 's|://yewtu.be|://youtu.be|; s|/watch?v=|/|')"
            result="$(mpvc_curl_cache_title "$filename")"
            ;;
        https://yewtu.be/*)
            filename="$(echo "$filename" | sed 's|://yewtu.be|://youtu.be|')"
            result="$(mpvc_curl_cache_title "$filename")"
            ;;
        *) # otherwise
            [ -e "$filename" ] && result=${filename##*/} || result=${filename##*/}
            ;;
    esac
    printf "$result\n"
}

mpvc_getjson() {
    sed -n '/"'"$1"'":/ { s/.*"'"$1"'":"\?\(.*\?\)"\?,.*/\1/; s/"\?,".\+".*//; p }'
}

mpvc_sockrepl() { $MPVC_SOCAT - "$MPVC_SOCKET" || nc -U -N "$MPVC_SOCKET"; }
mpvc_sockcmd_() { echo "$@" | mpvc_sockrepl; }
mpvc_sockcmd()  { oquiet mpvc_sockcmd_ "$@"; }
mpvc_socklist() {
    for f in $(find "$MPVC_CONFIG_DIR" -type s); do
        idle=$(MPVC_SOCKET=$f mpvc_get idle-active)
        if [ -z "$idle" ]; then
            echo "$f:	active=no";
        else
            echo "$f:	active=yes idle=$idle";
        fi
    done;
}

mpvc_cmdr() {
    command=$(for i in "$@"; do printf "\"$i\", "; done)
    equiet mpvc_sockcmd_ "{ \"command\": [ $command ] }"
}

mpvc_cmd()   { mpvc_cmdr "$@" | mpvc_getjson 'data'; }
mpvc_add()   { mpvc_cmd "add" "$@"; }
mpvc_get()   { mpvc_cmd "get_property_string" "$1"; }
mpvc_set()   { mpvc_cmd "set_property_string" "$@"; }
mpvc_cycle() { quiet mpvc_cmd "cycle" "$1"; }

mpvc_get_pause_status() {
    case "$(mpvc_get pause)" in
        yes) echo "paused";; no) echo "playing" ;; *) echo "NA";;
    esac
}

mpvc_get_playlist_json() {
    mpvc_cmdr "get_property" "playlist" |
        grep -o '"data":\[.*\]' |
        sed 's/^"data"://; s|{"filename":|\n\t{"filename":|g; /^\[\]$/ !s/]$/\n]/'
    QUIETFLAG="true"
}

mpvc_get_playlist_once() {
    mpvc_get_playlist_json |
        sed 's|,"current":true||; s|,"playing":true||; s|,"id":[0-9]\+||; s|{"filename":"\(.*\)"}|\1|; s|","title":.*||; s/,$//; /^\[$/d; /\]$/d' |
        awk -v numbered="${1:-}" '
        {
            gsub("^[ \t]*", " ")
            if (length(numbered)>0)
                printf "%2d %s\n", NR-1, $0
            else
                print
        }
    '
}

# fn args: $1: filename $2: full path flag to skip basename
mpvc_get_playlist_filename() {
    lid="${1:-}"
    fullPath="${2:-}"
    filename=$(mpvc_get "playlist/$lid/filename")
    [  "$fullPath" != "fullpath" ] && filename=$(mpvc_curl_cache_title_clean "$filename")
    echo "$filename"
}

# print filenames in the current playlist, mode=numbered disables filenames/URLs to title expansion
mpvc_get_playlist() {
    mode="${1:-}"
    lcount=$(mpvc_get playlist-count)
    lpos=$(mpvc_get playlist-pos)

    FIRSTLAST=$(mpvc_get_terminal_height "$lpos" "$lcount")
    if [ "$mode" = "numbered" ]; then
        mpvc_get_playlist_once "$mode"; return
    fi

    mpvc_get_playlist_once |
        awk -v mpvc="$0" -v lpos="$lpos" -v first="${FIRSTLAST%% *}" -v last="${FIRSTLAST##* }" \
        '
        function basename(url, fields, n)
        {
            n=split(url, fields, "/")
            return fields[n]
        }

        function mpvc_ytquery(url,  ytcmd, ytitle)
        {
            gsub("^ *", "", url)
            if (url ~ "^ *https?:")
            {
                ytcmd=sprintf("%s ytquery \"%s\"", mpvc, url)
                ytcmd | getline ytitle
                if (!ytitle)
                    mpvc " ytquery " url | getline ytitle
            } else {
                ytitle=basename(url)
            }
            gsub("\\\\u00", "\\x", ytitle)
            gsub("\\\\x22", "\x22", ytitle)
            gsub("\\\\x23", "\x23", ytitle)
            gsub("\\\\x25", "\x25", ytitle)
            gsub("\\\\x26", "\x26", ytitle)
            gsub("\\\\x27", "\x27", ytitle)
            gsub("\\\\xa0", "\xa0", ytitle)
            gsub("\\\\u[0-9a-f]{4}", "", ytitle)

            return ytitle
        }

        {
            lid = NR -1
            if (!(first <= lid && lid <= last))
            {
                next
            }

            if (lpos == lid)
            {
                if (ENVIRON["NO_COLOR"])
                {
                    title=mpvc_ytquery($0)
                    printf("%2d  %s\n", lid, title)
                }
                else
                {
                    "tput cols" | getline cols
                    mpvc " cmd expand-text \\${percent-pos}" | getline pct
                    count=int((cols) * (pct/100))
                    title=mpvc_ytquery($0)
                    line=sprintf("%2d  %s", lid, title)
                    fmtstr="\033[7m%-"count"s\033[0m\n"
                    printf(fmtstr, line)
                }
            }
            else
            {
                title=mpvc_ytquery($0)
                printf("%2d  %s\n", lid, title)
            }
        }
    '
    QUIETFLAG="true"
}

# saves playlist to file but with no path checking. we live dangerously
mpvc_save_playlist() {
    output="${1:-}"
    if [ -z "$output" ]; then
        output="/dev/stdout"
    else
        if [ -e "$output" ]; then
            echo "Playlist $output exists! Overwrite? [Y/n] "; read -r key
            [ "$key" != "Y" ] && return
        fi
        echo "Adding files to $output ..."
    fi
    mpvc_get_playlist_once > "$output"
    QUIETFLAG="true"
}

mpvc_autosave_playlist() {
    mpvc_save_playlist "$MPVC_PLAYLIST/${1:-$(date -Imin)}"
}

mpvc_autoload_playlist() {
    mpvc_load_playlist < "$MPVC_PLAYLIST/${1:-$(date -Imin)}"
}

mpvc_lsplaylists() {
    ls -1d "$@" "$MPVC_PLAYLIST"/*
}

# loads a playlist from stdin. Note the buffer trick to avoid clear wiping the playlist.
mpvc_load_playlist() {
    QUIETFLAG="true"
    buffer=""
    while read -r line; do buffer="${buffer}\n${line}"; done
    [ -z "$buffer" ] && return
    [ "${1:-}" = "clear" ] && mpvc_clear_playlist
    printf "$buffer\n" | while read -r line; do mpvc_appendtracks "$line"; done
}

# mpvc stash [list|show|push|drop|apply]
mpvc_stash() {
    cmd="$1"; shift
    QUIETFLAG="true"
    case "$cmd" in
        list) ls -ltr "$MPVC_STASH_DIR" ;;
        show) cat "$MPVC_STASH_DIR/$1" ;;
        drop) rm -i "$MPVC_STASH_DIR/$1" ;;
        push)
            if [ -e "$MPVC_STASH_DIR/$1" ]; then
                warn "$PROGNAME: Warn Existing $1 stash found, drop it first. Quitting"
                return
            fi
            mpvc_stash current "$1" > "$MPVC_STASH_DIR/$1"
            ;;
        apply) # if no stash given, default to stdin
            if [ -z "$1" ]; then
                mpvc_stash apply_current
            else
                mpvc_stash apply_current "$1" < "$MPVC_STASH_DIR/$1"
            fi
            ;;
        apply_current)
            while read -r line
            do
                case "$line" in
                    "# $PROGNAME "*) echo "$line";;
                    "mpvc --mpv")  $line;;
                    "mpvc --wait") $line;;
                    "mpvc cmd "*)  $line;;
                    "mpvc set "*)  $line;;
                    "mpvc add "*)  mpvc add "${line##mpvc add }";;
                esac
            done
            ;;
        current)
            echo "# $PROGNAME stash $MPVC_STASH_DIR/$1 # $PROGURL @version $PROGVERSION"
            echo "mpvc --mpv"
            echo "mpvc --wait"
            #echo "mpvc set video no"
            #echo "mpvc set mute yes"
            echo "mpvc set pause yes"
            echo "mpvc cmd playlist-clear"
            echo "mpvc cmd playlist-remove 0"
            mpvc_get_playlist_once | awk '{ gsub("^[ 	]*|[ 	]*$", ""); print "mpvc add "$0 }'
            echo "mpvc set playlist-pos $(mpvc_get playlist-pos)"
            echo "mpvc set playback-time $(mpvc_get playback-time)"
            echo "mpvc set loop-file $(mpvc_get loop-file)"
            echo "mpvc set loop-playlist $(mpvc_get loop-playlist)"
            echo "mpvc set ab-loop-a $(mpvc_get ab-loop-a)"
            echo "mpvc set ab-loop-b $(mpvc_get ab-loop-b)"
            echo "mpvc set idle $(mpvc_get idle)"
            echo "mpvc set mute $(mpvc_get mute)"
            echo "mpvc set fullscreen $(mpvc_get fullscreen)"
            echo "mpvc set aspect $(mpvc_get aspect)"
            echo "mpvc set cache $(mpvc_get cache)"
            echo "mpvc set speed $(mpvc_get speed)"
            echo "mpvc set volume $(mpvc_get volume)"
            echo "mpvc set volume-max $(mpvc_get volume-max)"
            echo "mpvc set video-zoom $(mpvc_get video-zoom)"
            echo "mpvc set video $(mpvc_get video)"
            echo "mpvc set msg-level $(mpvc_get msg-level)"
            echo "mpvc set pause $(mpvc_get pause)"
            #echo "mpvc set af $(mpvc_get af)"
            #echo "mpvc set working-directory $(mpvc_get working-directory)"
            ;;
        help)
            echo "usage: $PROGNAME stash [list|current|show|push|drop|apply]"
            ;;
        *)
            warn "$PROGNAME stash: error: unknown subcommand $cmd (see $PROGNAME stash help)."
            ;;
    esac
}

mpvc_dbinit() {
    locate -b '*.mp3' '*.mp4' '*.ogg' '*.opus' |
        sed 's|^\(/.*/\).*|\1|' | sort | uniq |
        tee "$MPVC_DATABASE"
}

mpvc_dblist() {
    cat "$MPVC_DATABASE"
    for playlist in $(printf "%s\n" "$MPVC_PLAYLIST"/*); do echo "$playlist"; done
}

## Control Functions ##########################################################

mpvc_appendtrack() {
    filename="$*"
    # require absolute paths
    case "$filename" in
        /*) ;; *) [ -e "$filename" ] && filename="$(pwd)/$filename" ;;
    esac
    # skip over various other filetypes and images unless wanted
    case "$filename" in
        *.txt|*.log|*.cue) return ;;
        *.png|*.jpg|*.jpeg|*.gif|*.psd|*.pdf) [ "$IMAGEFLAG" != "true" ] && return ;;
    esac
    if [ -n "$filename" ]; then
        # cache media here if media is found in local storage
        if [ "$MPVC_LOCAL_CACHE" = "true" ]; then filename=$(echo "$filename" | mpvc-fzf -C); fi
        echo "Adding: $(mpvc_curl_cache_title_clean "$filename")"
        quiet mpvc_cmd "loadfile" "$filename" "append-play"
    fi
}

mpvc_appendtracks() {
    shiftcount=0
    QUIETFLAG="true"
    mpvc_startmpv --really-quiet --idle=once
    for arg in "$@"; do
        case "$arg" in
        ???????????) mpvc_appendtrack "$arg"; _=$((shiftcount+=1)) ;; # ytid videoid [A-Za-z-]{11}
        http*)       mpvc_appendtrack "$arg"; _=$((shiftcount+=1)) ;;
        *)           if [ -e "$arg" ]; then mpvc_appendtrack "$arg"; _=$((shiftcount+=1)); fi
        esac
    done
    #return $shiftcount
}

mpvc_play_next() {
    QUIETFLAG="true"
    # add track to the playlist & move to next position
    mpvc_appendtracks "$1"
    lid_last="$(( $(mpvc_get playlist-count) - 1 ))"
    lid_next="$(( $(mpvc_get playlist-pos) + 1 ))"
    mpvc_move_track "$lid_last" "$lid_next"
}

mpvc_set_time() {
    mode=$1; shift
    if [ "$mode" = "absolute" ]; then
        timeSec=$(mpvc_parse_time "$1") || return $?
        mpvc_set "playback-time" "$timeSec"
        return
    fi
    # relative
    case "$1" in
        *%*) mpvc_set "percent-pos" "${1%%%}"; return ;;
        -*)  mpvc_add "playback-time" "-$(mpvc_parse_time "${1##-}")" ;;
        +*)  mpvc_add "playback-time" "+$(mpvc_parse_time "${1##+}")" ;;
        *)   mpvc_add "playback-time" "$(mpvc_parse_time "${1}")" ;;
    esac
}

mpvc_set_track() {
    isInt "$1" || return 1
    lpos=$(mpvc_get playlist-pos)
    lcount=$(mpvc_get playlist-count)
    [ "$lpos" = "null" ] && lpos=0
    case "$2" in
        absolute) newpos=$(( $1 % lcount ));;
        relative) newpos=$(( (lpos + $1) % lcount ))
        ;;
    esac
    quiet mpvc_set "playlist-pos" "$newpos"
}

mpvc_move_track() {
    isInt "$1" || exit 1
    QUIETFLAG="true"
    lcount=$(mpvc_get playlist-count)
    if [ -z "$2" ]; then
        srcpos=$(mpvc_get playlist-pos)
        dstpos=$1
    else
        srcpos=$1
        [ "$1" = "$" ] && srcpos="$lcount"
        dstpos=$2
        [ "$2" = "$" ] && dstpos="$lcount"
        if [ "$srcpos" -lt 0 ] || [ "$srcpos" -gt "$lcount" ]; then
            die 1 "Item $srcpos is out of range of playlist."
        fi
    fi

    [ "$dstpos" -lt 0 ] &&
        die 1 "Position $dstpos is out of range of playlist."
    #[ "$dstpos" -eq 1 ] && dstpos=0
    quiet mpvc_cmd "playlist-move" "$srcpos" "$dstpos"
    quietcheck mpvc_get_playlist
}

mpvc_remove_track() {
    lid=$1
    if [ "$lid" = "current" ]; then
        oquiet mpvc_cmd "playlist-remove" "$lid"
        return;
    fi
    isInt "$lid" || return 1
    lcount=$(mpvc_get playlist-count)
    if [ -z "$lcount" ] || [ "$lid" -lt 0 ] || [ "$lid" -ge "$lcount" ]; then
        warn "Item $lid is out of range of playlist."
    fi
    filename="$(mpvc_get_playlist_filename "$lid")"
    oquiet mpvc_cmd "playlist-remove" "$lid"
    quietcheck warn "$filename has been removed from the playlist."
}

mpvc_always_play() {
    if [ "$(mpvc_get playlist-pos)" = "null" ]; then
        mpvc_set_track 0 absolute; return
    fi
    mpvc_set_pause "no"
}

mpvc_set_pause() {
    quiet mpvc_set "pause" "${1:-}"
}

mpvc_toggle_mute() {
    [ $# -gt 0 ] && quiet mpvc_set "mute" "${1:-}" && return
    quiet mpvc_cmd "cycle" "mute"
}

mpvc_toggle_loop() {
    property=${1:-}
    value=${2:-}
    case "$value" in
        '')      quiet mpvc_cmd "cycle-values" "$property" "yes" "no" ;;
        on|yes)  quiet mpvc_set "$property" yes ;;
        off|no)  quiet mpvc_set "$property" no  ;;
        *)       quiet mpvc_set "$property" "$value";;
    esac
}

mpvc_set_volume() {
    case "$1" in
        '') die 1 "Specify volume in/decrease amount or absolute amount." ;;
        +*) mpvc_add "volume" "$1"  ;;
        -*) mpvc_add "volume" "$1"  ;;
        *%) mpvc_set "volume" "${1%%%}";;
        *)  mpvc_set "volume" "$1" ;;
    esac
}

mpvc_search() {
    [ $# -lt 2 ] && return
    mode=$1; shift;
    mpvc_get_playlist "$mode" | awk '/'"$*"'/ { print $0 }';
}

mpvc_search_play() {
    [ $# -lt 2 ] && return
    mode=$1; shift
    lid=$(mpvc_search "$mode" "$1" | awk '{print $1; exit}')
    [ -z "$lid" ] && warn "$PROGNAME: Searching for $*, nothing found."
    mpvc_set_track "$lid" absolute
}

mpvc_search_remove() {
    [ $# -lt 2 ] && return
    mode=$1; shift
    list=$(mpvc_search "$mode" "$1" | awk '{print $1}' | mpvc_tac )
    [ -z "$list" ] && warn "$PROGNAME: Searching for $*, nothing found."
    for i in $list; do mpvc_remove_track "$i"; done
    QUIETFLAG="true"
}

mpvc_search_move() {
    [ $# -lt 2 ] && return
    mode=$1; shift
    list=$(mpvc_search "$mode" "$1" | awk '{print $1}' | mpvc_tac )
    [ -z "$list" ] && warn "$PROGNAME: Searching for $*, nothing found."
    for i in $list; do mpvc_move_track "$i" "$2"; done
    QUIETFLAG="true"
}

mpvc_shuffle_playlist() {
    case "$1" in
        shuffle|unshuffle) quiet mpvc_cmd "playlist-$1";;
        *) return;;
    esac
    echo "Playlist $1."
    [ "$(mpvc_get loop-playlist)" = "no" ] && mpvc_toggle_loop "loop-playlist" yes
}

mpvc_crop_playlist() {
    quiet mpvc_cmd "playlist-clear"
    quietcheck mpvc_get_playlist
}

mpvc_clear_playlist() {
    # kill any running process of mpvc add
    #quiet pgrep -f "mpvc add" && pkill -f "mpvc add"
    mpvc_crop_playlist
    mpvc_remove_track 0
    echo "Playlist cleared."
}

## Formatting and Printing Functions ##########################################

# formats and prints according to $FORMATSTRING
mpvc_print_status() {
    # not that nice, in fact way more ugly, but also way faster
    RE='year\|genre\|album\|comment\|volume\|path\|height\|width\|playback-time\|ab-loop-[ab]\|speed\|force-window\|video\|aspect\|idle\|fullscreen\|chapter\|chapters\|=chapter'
    F=$(echo "$FORMATSTRING" |
        sed \
            -e "s/%\(${RE}\)%/\${\1:NA}/g" \
            -e "s/%title%/\${media-title}/g" \
            -e "s/%artist%/\${metadata\/by-key\/artist}/g" \
            -e "s/%albumartist%/\${metadata\/by-key\/album}/g" \
            -e "s/%muted%/\${mute}/g" \
            -e "s/%percentage%/\${percent-pos}/g" \
            -e "s/%name%/\${filename}/g" \
            -e "s/%repeat%/\${loop-playlist}/g" \
            -e "s/%single%/\${loop-file}/g" \
            -e "s/%frame%/\${estimated-frame-number}/g" \
            -e "s/%dir%/\${working-directory}/g" \
            -e "s/%remaining%/\${playtime-remaining}/g" \
            -e "s/%length%/\${duration}/g" \
            -e "s/%time%/\${playback-time}/g" \
            -e "s/%precisetime%/\${playback-time}/g" \
            -e "s/%playlistlength%/\${playlist-count}/g" \
            -e "s/%position%/\${playlist-pos}/g" \
            -e "s/%status%/$(mpvc_get_pause_status)/g" \
            -e ''
    )
    mpvc_cmd "expand-text" "${F}" | sed 's/NL/\n/g'
}

mpvc_print_status_final() {
    [ "$QUIETFLAG" = "true" ] && return
    # catches if mpv is idle or not
    if [ "$(mpvc_get idle-active)" = "true" ]; then
        warn "MPV on ${MPVC_SOCKET##$HOME/} is currently idle."; return
    fi
    mpvc_print_status
}

## Misc Functions #############################################################

isInt() { printf '%d' "$1" >/dev/null 2>&1 && [ -n "$1" ]; }

mpvc_tty_lines() {
    tty=$(tty -s && tty || ps -hp $$ -o tty | sed 's|^|/dev/|' ) # sorry XXX
    lines=$(stty size -F "$tty")
    lines=${lines%% *}
    echo "$lines"
}

mpvc_get_terminal_height() {
    plpos="$1"
    lcount="$2"
    [ "$plpos" = "null" ] && plpos=0
    lines=$(mpvc_tty_lines)
    rows=$((lines - ${MPVC_CLINE:-3}))
    half=$((rows / 2))
    plhalf=$((plpos + half))

    FIRSTLAST="0 $lcount"
    if [ "$mode" != "full" ]; then
        if   [ "$lcount" -le $rows ]; then     FIRSTLAST="0 $lcount"
        elif [ "$plpos"  -le $half ]; then     FIRSTLAST="0 $rows"
        elif [  $plhalf  -ge "$lcount" ]; then FIRSTLAST="$((lcount - rows)) $lcount"
        elif [  $plhalf  -lt "$lcount" ]; then FIRSTLAST="$((plpos - half)) $plhalf"
        fi
    fi
    echo "$FIRSTLAST"
}

mpvc_parse_time() {
    if ! echo "$1" | grep -q -e "^\([0-9.]*:\)\{0,2\}[0-9.]*$" -e "^[0-9]*[sSmMhH]$"; then
        warn "Timestamp formats must match either H:M:S with hour and minute fields optional,"
        warn "or a single integer number with a unit of time appended: h, m, s."
        exit 1
    fi
    case "$1" in
        *s|*S|*m|*M|*h|*H)
            timeInt=${1%%?}
            isInt "$timeInt" || exit 1
            case "$1" in
                *h|*H) timeInt=$((timeInt * 60 * 60)) ;;
                *m|*M) timeInt=$((timeInt * 60))      ;;
            esac
            ;;
        *)
            timeInt=$(printf '%s' "$1" |
                awk -F ':' '{ for (x=1; x<=NF; x++) t=t*60+$x; print t }')
            ;;
    esac
    printf "%d" "$timeInt"
}

mpvc_validate_socket() {
    # validate deps
    quiet command -v "$MPVC_MPV" || die 4 "$PROGNAME: Error: No mpv found. Install to continue."
    quiet command -v "$MPVC_SOCAT" || quiet command -v nc || die 4 "$PROGNAME: Error: No socat/nc found. Install one"
    # test if socket exists
    if [ ! -S "$MPVC_SOCKET" ]; then die 2 "Socket ${MPVC_SOCKET##$HOME/} does not exist. Use mpvc --mpv to start one."; fi
    # test if socket is open
    if [ "$(mpvc_get pause)" = "" ]; then die 3 "No files added to ${MPVC_SOCKET##$HOME/}."; fi
}

mpvc_get_version() {
    echo "version: $PROGNAME # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL"
    echo "originally forked from lwillets/mpvc"
    echo
    "$MPVC_MPV" --version
}

mpvc_idleloop() {
    mpvc_cmd "unobserve_property" 1
    mpvc_cmd "observe_property" 1 "$@"
    $MPVC_SOCAT -t0 -,ignoreeof "$MPVC_SOCKET"
}

mpvc_delay() { sleep "${1:-0.1}"; }
mpvc_wait()  { until [ -n "$(mpvc_get idle-active)" ]; do mpvc_delay "${1:-}"; done; }
# mpvc_startmpv: exec & wait until mpv starts up
mpvc_startmpv() {
    if [ -z "$(mpvc_get idle-active)" ]; then
        mpvc_delay 0.1
        [ -n "$(mpvc_get idle-active)" ] && return
        echo "$PROGNAME: No running mpv found, starting mpv now"
        exec "$MPVC_MPV" --input-ipc-server="$MPVC_SOCKET" $MPVOPTIONS "$@" &
        mpvc_wait 0.5
    fi
}

main() {
    mpvc_config
    arg1=${1:-}
    case "$arg1" in
    ytquery*) ;;
    -k|--kill|kill|-K|--killall|killall) ;;
    -c|--crop|crop|-C|--clear|clear|cmd|sockcmd|socklist|--socklist) ;;
    -a|add|append|-A|playnext|--playnext|mpv|--mpv|stash|--stash|--toggle|toggle|-q|--quiet) ;;
    load|--load|autoload|--autoload|lsplaylists|--lsplaylists|dbinit|--dbinit|dblist|--dblist) ;;
    version|--version|-Q|--vid=no|-S) ;;
    help|--help|-h|long-help|--long-help|-H|--list-options) ;;
    *) mpvc_validate_socket;; # otherwise, validate socket
    esac
    for arg in "$@"; do
        # grab mpv options first if any
        [ "$arg" = "--" ] && { MPVFLAG=true; shift; continue; }
        [ "${MPVFLAG:-}" = "true" ] && { MPVOPTIONS="$MPVOPTIONS $arg"; shift; continue; }
        [ $# -eq 0 ] && break
        case "${1:-}" in
            # mpc compatibility layer
            play|start|resume)
                shift
                case "${1:-}" in
                    '') ;;
                    $) mpvc_set_track "$(( $(mpvc_get playlist-count) - 1 ))" absolute;;
                    *) isInt "${1:-}" && mpvc_set_track "$1" absolute;;
                esac
                mpvc_always_play
            ;;
            vol|volume) shift; mpvc_set_volume "${1:-}" ;;
            repeat)     shift; mpvc_toggle_loop "loop-playlist" "${1:-}" ;;
            single)     shift; mpvc_toggle_loop "loop-file" "${1:-}" ;;
            pause)      mpvc_set_pause "yes"       ;;
            next|--next)mpvc_set_track 1 relative ;;
            prev|--prev)mpvc_set_track -1 relative;;
            move|mv)    shift; mpvc_move_track "${1:-}" "${2:-}" ;;
            mute)       mpvc_toggle_mute yes     ;;
            unmute)     mpvc_toggle_mute no      ;;
            pretty)     die 1 "$PROGNAME: $* not implemented" ;;
            find)       die 1 "$PROGNAME: $* not implemented" ;;

            add|-a|--append) mpvc_appendtracks "$@"; shift "$((shiftcount+1))" ;;
            #replace|--replace) replaceTracks "$@"; shift "$((shiftcount+1))" ;;

            # consume) to implement # add on|off toggle
            # random) MPV doesn't have this control option!

            # GNU-style options
            -t|--seek|seek)                  shift; mpvc_set_time "relative" "${1:-}" ;;
            -T|--time|time)                  shift; mpvc_set_time "absolute" "${1:-}" ;;
            -v|--vol)                        shift; mpvc_add "volume" "${1:-}"  ;;
            -V|--volume)                     shift; mpvc_set "volume" "${1:-}"  ;;
            -x|--speed|speed)                shift; mpvc_add "speed" "${1:-}"  ;;
            -X|--speedval)                   shift; mpvc_set "speed" "${1:-}"  ;;
            -j|--track|track)                shift; mpvc_set_track "${1:-}" relative  ;;
            -J|--tracknum|tracknum)          shift; mpvc_set_track "${1:-}" absolute  ;;
            -r|--remove|rm|remove|del)       shift; mpvc_remove_track "${1:-}"; QUIETFLAG=true;;
            -A|--playnext|playnext)          shift; mpvc_play_next "${1:-}"           ;;
            -o|--save|save)                  shift; mpvc_save_playlist "${1:-}" ;;
            --load|load)                     shift; mpvc_load_playlist      ;;

            mpv|--mpv)                       mpvc_startmpv --really-quiet --idle=yes;;
            --current|current)               ;;
            --loadc|loadc)                   shift; mpvc_load_playlist "clear"    ;;
            --saven|saven)                   shift; mpvc_get_playlist_once "numbered"; QUIETFLAG=true;;
            --autosave|autosave)             shift; mpvc_autosave_playlist "${1:-}"; ;;
            --autoload|autoload)             shift; mpvc_autoload_playlist "${1:-}"; ;;
            --lsplaylists|lsplaylists)       shift; mpvc_lsplaylists "${1:-}"; QUIETFLAG=true;;
            --dblist|dblist)                 shift; mpvc_dblist; return ;;
            --dbinit|dbinit)                 shift; mpvc_dbinit; return ;;
            --cycle|cycle)                   shift; mpvc_cmd cycle "$@"; QUIETFLAG=true;;
            --set|set|s)                     shift; mpvc_cmd set_property "$@"; return;;
            --get|get|g)                     shift; mpvc_cmd get_property "${1:-}"; QUIETFLAG=true;;
            --sets|sets|ss)                  shift; mpvc_cmd set_property_string "$@"; return;;
            --gets|gets|gs)                  shift; mpvc_cmd get_property_string "${1:-}"; QUIETFLAG=true;;
            --setr|setr|sr)                  shift; mpvc_cmdr set_property "$@"; return;;
            --getr|getr|gr)                  shift; mpvc_cmdr get_property "${1:-}"; QUIETFLAG=true;;
            --togglec|togglec)               shift; mpvc_cycle "cache" ;;
            --togglev|togglev)               shift; mpvc_cycle "video" ;;
            --togglew|togglew)               shift; mpvc_cycle "force-window" ;;
            --togglei|togglei)               shift; mpvc_cycle "idle" ;;
            --idleloop|idleloop)             shift; mpvc_idleloop "${1:-}"; QUIETFLAG=true ;;
            --cmd|cmd)                       shift; mpvc_cmd "$@"; return ;;
            --cmdr|cmdr)                     shift; mpvc_cmdr "$@"; return ;;
            --sockcmd|sockcmd)               shift; mpvc_sockcmd_ "${1:-}"; QUIETFLAG=true ;;
            --sockrepl|sockrepl)             shift; mpvc_sockrepl; QUIETFLAG=true ;;
            --socklist|socklist)             shift; mpvc_socklist "${1:-}"; QUIETFLAG=true ;;

            --search|search)                 shift; mpvc_search "full" "$@"; QUIETFLAG=true ;;
            --Search|Search)                 shift; mpvc_search "numbered" "$@"; QUIETFLAG=true ;;
            -R|--searchrm|searchrm)          shift; mpvc_search_remove "full" "${1:-}";;
               --searchRm|searchRm)          shift; mpvc_search_remove "numbered" "${1:-}";;
            -M|--searchmv|searchmv)          shift; mpvc_search_move "full" "${1:-}" "${2:-}";;
               --searchMv|searchMv)          shift; mpvc_search_move "numbered" "${1:-}" "${2:-}";;
            -N|--searchplay|searchplay)      shift; mpvc_search_play "full" "${1:-}" ;;
            -n|--searchPlay|searchPlay)      shift; mpvc_search_play "numbered" "${1:-}" ;;
            --stash|stash)                   shift; mpvc_stash "${1:-}" "${2:-}";;
            expand-text)                     shift; mpvc_cmd expand-text "$@"; return;;
            metadata)                        shift; mpvc_cmdr get_property metadata "$@"; return;;

            ytquery)                         shift; mpvc_curl_cache_title_clean "$@"; return;;
            ytqueryjson)                     shift; mpvc_curl_cache_json "$@"; return;;
            filename)                        shift; mpvc_get_playlist_filename "$@"; return;;

            -k|--kill|kill)                  quiet mpvc_cmd "quit"; QUIETFLAG=true ;;
            -K|--killall|killall)            quiet pkill -9 -f "$MPVC_MPV "; QUIETFLAG=true ;;
            -s|--stop|stop)                  mpvc_set_pause "yes"; mpvc_set_time "absolute" 0 ;;
            -P|--play)                       mpvc_always_play ;;
            -p|--toggle|toggle)              mpvc_cycle "pause" ;;
            -m|--mute)                       mpvc_toggle_mute                 ;;
            -i|--playlist|playlist)          mpvc_get_playlist "";            ;;
            -I|--fullplaylist|fullplaylist)  mpvc_get_playlist "full";        ;;
               --playlistjson|playlistjson)  mpvc_get_playlist_json ""        ;;
            -L|--loop|loop)                  mpvc_toggle_loop "loop-playlist" ;;
            -l|--loopfile|loopfile)          mpvc_toggle_loop "loop-file"     ;;
            -z|--shuffle|shuffle)            mpvc_shuffle_playlist shuffle; QUIETFLAG=true;;
            -Z|--unshuffle|unshuffle)        mpvc_shuffle_playlist unshuffle; QUIETFLAG=true;;
            -c|--crop|crop)                  mpvc_crop_playlist; QUIETFLAG=true;;
            -C|--clear|clear)                mpvc_clear_playlist; QUIETFLAG=true;;
            --delay|delay)                   mpvc_delay;;
            --wait|wait)                     mpvc_wait;;

            # global argument parsing
            -f|--format)                     shift; FORMATSTRING="${1:-}"       ;;
            -S|--socket)                     shift; MPVC_SOCKET="${1:-}"; mpvc_config ;;
            -Q|--vid=no)                     MPVOPTIONS="$MPVOPTIONS --vid=no"; ;;
            --image)                         IMAGEFLAG=true;                ;;
            -q|--quiet)                      QUIETFLAG=true;                ;;
            --color|color)                   unset NO_COLOR                 ;;
            --nocolor|nocolor)               export NO_COLOR=true           ;;
            --version|version)               mpvc_get_version; exit 0;      ;;
            --list-options)                  usage; exit 0;                 ;;
            -h|--help|h|help)                usage; exit 0;                 ;;
            -H|--long-help|long-help)        usage "$@"; exit 0;            ;;
            -?)                              usage; exit 1;                 ;;
        esac
        if [ $# -ge 1 ]; then shift; fi
    done
    # produce format strings last
    quietcheck mpvc_print_status_final
}

quietcheck main "$@";
