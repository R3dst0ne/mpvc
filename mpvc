#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# control mpv remotely using JSON ipc
# depends on: socat bc and a sane unix environment
# https://mpv.io/manual/master/#json-ipc

ARGS="$@"

SOCKET=${SOCKET:-/tmp/mpvsocket}

usage() {
    cat << EOF

Usage: $(basename $0) [-S "socket"] [-a "filenames"] "[-f "format string"]
    -S : Set socket location [default: $SOCKET].
    -q : Produce no textual output.
    -f : Enter a format string.
    -a : Add files to current playlist. This cannot be combined with another option.
    -i : Print all filenames of tracks in current playlist.
    -s : Increase/decrease time in seconds.
    -t : Set absolute time in seconds.
    -v : Increase/decrease volume relatively to the current volume.
    -V : Set absolute volume.
    -r : Go forwards/backwards through the playlist queue.
    -R : Jump to playlist item number.
    -x : Increase/decrease speed relatively to the current speed.
    -X : Set absolute speed.
    -p : Toggle play/paused.
    -m : Toggle mute/unmuted.
    -l : Loop currently playing file.
    -L : Loop currently playing playlist.
    -z : Shuffle the current playlist.
    -k : Kill the current mpv process controlling the given socket.
    -K : Kill all mpv processes found.
    -h : Print this help.

Formatting:
    $(basename $0) will interpret the following delimiters if they are found:

    %filename%, %title%, %artist%, %album%, %albumartist%, %genre%, %year%
    %status%, %time%, %precisetime%, %length%, %percentage%, %speed%
    %playlist%, %position%, %repeat%, %single%
    %volume%, %muted%
    %frame%

Exit codes:
     0: Program ran succesfully.
     1: Input Argument error.
     2: Socket does not exist.
     3: Socket is not currently open.
EOF

    test -z $1 && exit 0 || exit $1
}

    # Retrieval Functions
###############################################################################

getMediaFilename() {
    mediaFilename=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"media-title\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    mediaFilename=$(printf '%s\n' "$mediaFilename" | cut -d: -f 2 | \
        cut -d, -f 1 | sed s/\"//g)

    printf "$mediaFilename"
}

getMetadata() {
    test -z $1 && return
    property=$1

    metadata=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"metadata/by-key/${property}\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    errorCheck=$(printf '%s\n' "$metadata" | cut -d\" -f 2)

    test "$errorCheck" = "error" && {
        result="N/A"
    } || {
        metadata=$(printf '%s\n' "$metadata" | cut -d: -f 2 | \
        cut -d, -f 1 | sed s/\"//g)
        result="$metadata"
    }

    # test if title has no property
    test "$property" = "title" && test "$result" = "N/A" && {
        result=$(getMediaFilename)
    }

    printf "$result"
}

getDuration() {
    duration=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"duration\"] }" | $SOCKETCOMMAND 2> /dev/null)
    duration=$(printf '%s\n' $duration | cut -d: -f 2 | cut -d. -f 1)

    printf "$duration"
}

getPercentage() {
    percentage=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"percent-pos\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    percentage=$(printf '%s\n' "$percentage" | cut -d: -f 2 |
        cut -d, -f 1 | cut -d. -f 1)

    printf "$percentage"
}

getValue() {
    property=$1
    test "$property" != "precisetime" && {
        value=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"$property\"] }" | $SOCKETCOMMAND 2> /dev/null)
        value=$(printf '%s\n' $value | cut -d\" -f 4 | cut -d. -f 1)
    } || {
        property="playback-time"
        value=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"$property\"] }" | $SOCKETCOMMAND 2> /dev/null)
        value=$(printf '%s\n' $value | cut -d\" -f 4)
    }

    test "$value" = "error" && printf "N/A" || printf "$value"
}

# print all filenames in current playlist
getPlaylist() {
    tracks=$(getValue playlist-count)
    for i in $(seq $tracks); do
        playlistCur=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"playlist/$((i - 1))/filename\"] }" | $SOCKETCOMMAND 2> /dev/null)
        playlistCur=$(printf '%s ' $playlistCur | cut -d\" -f 4)

        currentTrack=$(getValue playlist-pos)
        test "$currentTrack" != "N/A" && {
            test "$currentTrack" -eq $((i - 1)) && {
                allTracks="${allTracks}$(color "${playlistCur}")\n"
            } || {
                allTracks="${allTracks}$(printf "${playlistCur}")\n"
            }
        } || {
            allTracks="${allTracks}$(printf "${playlistCur}")\n"
        }
    done

    test ! -z "$allTracks" && {
        printf "$allTracks"
    } || {
        printf '%s\n' "mpv on ${SOCKET} is currently idle."
    }
    exit 0
}

getSpeed() {
    speed=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"speed\"] }" | $SOCKETCOMMAND 2> /dev/null)
    speed=$(printf '%s\n' $speed | cut -d\" -f 4)
    speed=$(printf '%0.2f\n' "$speed")

    printf "$speed"
}

getMuteStatus() {
    muted=$(printf '%s\n' "{ \"command\": [\"get_property\", \"mute\" ] }" | \
        $SOCKETCOMMAND 2> /dev/null)
    muted=$(printf '%s\n' "$muted" | cut -d: -f 2 | cut -d, -f 1)

    test "$muted" = "true" && muted="yes" || muted="no"
    printf "$muted"
}

getPauseStatus() {
    status=$(printf '%s\n' "{ \"command\": [\"get_property\", \"pause\" ] }" | \
        $SOCKETCOMMAND 2> /dev/null)
    status=$(printf '%s\n' "$status" | cut -d: -f 2 | cut -d, -f 1)

    test ! -z "$status" && {
        test "$status" = "true" && {
            status="playing"
        } || {
            status="paused"
        }
    } || {
        status="N/A"
    }

    printf "$status"
}

getLoopStatus() {
    property=$1
    loop=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"$property\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    loop=$(printf '%s\n' "$loop" | cut -d: -f 2 | cut -d, -f 1 | sed s/\"//g)

    printf "$loop"
}

getFrameNumber() {
    frame=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"estimated-frame-number\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    errorCheck=$(printf '%s\n' "$frame" | cut -d\" -f 2)
    frame=$(printf '%s\n' "$frame" | cut -d: -f 2 | cut -d, -f 1 | sed s/\"//g)

    test "$errorCheck" = "error" && {
        printf "N/A"
    } || {
        printf "$frame"
    }
}

    # Control Functions
###############################################################################

phraseAppendTracks() {
    # find media extensions and append a newline to them
    APPENDSTRING=$(echo $APPENDSTRING | sed "
    s#.mp3 #.mp3\n#g
    s#.m4a #.m4a\n#g
    s#.aac #.acc\n#g
    s#.flac #.flac\n#g
    s#.mp4 #.mp4\n#g
    s#.mkv #.mkv\n#g
    s#.flv #.flv\n#g
    s#.ogv #.ogv\n#g
    s#.webm #.webm\n#g
    s#.gif #.gif\n#g
    s#.png #.png\n#g
    s#.jpg #.jpg\n#g
    s#.jpeg #.jpeg\n#g
    ")

    # mpv will resolve files given in a directory,
    # but I have no way of separating directories with sed at the moment

    totalFiles=$(printf "${APPENDSTRING}\n" | wc -l)
    for i in $(seq $totalFiles); do
        appendTrack $(printf "${APPENDSTRING}" | sed "$i!d")
        # need slight pause to start mpv
        test "$i" -eq 1 && sleep 0.1
    done
}

appendTrack() {
    filename=$(printf '%s ' "${@}" | sed "s/.$//")

    pgrep "mpv" -x 2>&1 > /dev/null && {
        result=$(printf '%s\n' "{ \"command\": [\"loadfile\", \"$filename\", \
\"append-play\" ] }" | $SOCKETCOMMAND 2> /dev/null)
        result=$(printf '%s\n' $result | cut -d\" -f 4)
    } || {
        exec mpv --really-quiet --no-audio-display \
            --input-unix-socket=${SOCKET} "$filename" &
    }

    test "$result" = "error" && {
        printf '%s\n' "Idle adding: ${filename}"
    } || {
        printf '%s\n' "Adding: ${filename}"
    }
}

setTimeRelative() {
    intCheck $1

    time=$(getValue playback-time)
    time=$((time + $1))

    printf '%s\n' "{ \"command\": [\"set_property\", \"playback-time\", \
$time ] }" | $SOCKETCOMMAND > /dev/null
}

setTimeAbsolute() {
    intCheck $1
    time=$1

    printf '%s\n' "{ \"command\": [\"set_property\", \"playback-time\", \
$time ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeRelative() {
    intCheck $1

    volume=$(getValue volume)

    test "$volume" = "error" && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    volume=$((volume + $1))

    test $volume -lt 0 && {
         printf '%s\n' "Volume cannot be set lower than 0%" >&2
         exit 1
    }
    test $volume -gt 130 && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
\"volume\", $volume ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeAbsolute() {
    # test if media has sound
    volume=$(getValue volume)

    test "$volume" = "error" && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    intCheck $1
    volume=$1

    test $volume -lt 0 && {
        printf '%s\n' "Volume cannot be set lower than 0%" >&2
        exit 1
    }
    test $volume -gt 130 && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
\"volume\", $volume ] }" | $SOCKETCOMMAND > /dev/null
}

setTrackRelative() {
    intCheck $1

    currentTrack=$(getValue playlist-pos)
    desiredTrack=$((currentTrack + $1))
    trackCount=$(getValue playlist-count)

    test $desiredTrack -lt 0 && {
        desiredTrack=0
    }
    test $desiredTrack -ge $trackCount && {
        killSocket
    }
    test "$desiredTrack" -lt "$currentTrack" && {
        seconds=$(getValue playback-time)
        test "$seconds" -ge 10 && {
            setTimeAbsolute 0
            return
        }
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"playlist-pos\", \
$desiredTrack ] }" | $SOCKETCOMMAND > /dev/null

    # tiny delay so printDefaultStatus can catch up
    sleep 0.5
}

setTrackAbsolute() {
    intCheck $1

    currentTrack=$1
    currentTrack=$((currentTrack - 1))
    trackCount=$(getValue playlist-count)

    test $currentTrack -lt 0 || test $currentTrack -ge $trackCount && {
        printf '%s\n' "Item $currentTrack is out of range of playlist." >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
\"playlist-pos\", $currentTrack ] }" | $SOCKETCOMMAND > /dev/null

    # tiny delay so printDefaultStatus can catch up
    sleep 0.5
}

setSpeedRelative() {
    speed=$(getSpeed)

    fltCheck $1
    speed=$(echo "$speed+$1\n" | bc)

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
\"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

setSpeedAbsolute() {
    fltCheck $1
    speed=$1

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
\"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

alwaysPlay() {
    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", false ] }" | \
        $SOCKETCOMMAND > /dev/null
}

togglePause() {
    status=$(getPauseStatus)
    test $status = "playing" && status="false" || status="true"

    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", $status ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleMute() {
    muted=$(getMuteStatus)

    test "$muted" = "no" && muted="true" || muted="false"

    printf '%s\n' "{ \"command\": [\"set_property\", \"mute\", $muted ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleLoopFile() {
    loopFile=$(getLoopStatus loop-file)

    test $loopFile = "no" && loopFile="inf" || loopFile="no"

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"loop-file\", \
\"$loopFile\" ] }" | $SOCKETCOMMAND > /dev/null
}

toggleLoopPlaylist() {
    loopPlaylist=$(getLoopStatus loop)

    test $loopPlaylist = "no" && loopPlaylist="inf" || loopPlaylist="no"

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"loop\", \
\"$loopPlaylist\" ] }" | $SOCKETCOMMAND > /dev/null
}

shufflePlaylist() {
    printf '%s\n' "{ \"command\": [\"playlist-shuffle\" ] }" | \
        $SOCKETCOMMAND > /dev/null
    printf '%s\n' "Playlist shuffled."
    exit 0
}

    # Time Functions
###############################################################################

elaspedTime() {
    time=$(getValue playback-time)
    formatTime $time
}

preciseElaspedTime() {
    time=$(getValue precisetime)
    bigTime=$(echo $time | cut -d. -f 1)
    tinyTime=$(echo $time | cut -d. -f 2)
    formatTime $bigTime $tinyTime
}

trackLength() {
    duration=$(getDuration)
    formatTime $duration
}

# format seconds into HH:MM:SS format
formatTime() {
    rawSeconds=$1
    seconds=$((rawSeconds % 60))
    minutes=$((rawSeconds / 60))
    hours=$((minutes / 60))

    test $seconds -lt 10 && seconds="0$seconds"
    test $minutes -ge 60 && minutes=$((minutes - hours*60))
    test $minutes -lt 10 && minutes="0$minutes"
    test $hours -lt 10 && hours="0$hours"

    test -z $2 && {
        printf '%s\n' "$hours:$minutes:$seconds"
    } || {
        milleSeconds=$2
        printf '%s\n' "$hours:$minutes:$seconds:$milleSeconds"
    }
}

    # Misc. Functions
###############################################################################

color() {
    f0='[30m'; f1='[31m'; f2='[32m'; f3='[33m'
    f4='[34m'; f5='[35m'; f6='[36m'; f7='[37m'
    b0='[40m'; b1='[41m'; b2='[42m'; b4='[44m'
    b4='[44m'; b5='[45m'; b6='[46m'; b7='[47m'
    B='[1m'; R='[0m'; I='[7m'

    cat << COLOR
$f0$B$I$b2█$I$b7 $@ $I$b7$R
COLOR
}

intCheck() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }
}

fltCheck() {
    testDecimal=$(echo "$1\n" | bc)
    test $testDecimal -eq 0 2> /dev/null && {
        printf '%s\n' "$1 is not a number." >&2
        exit 1
    }
}

validateDeps() {
    type mpv 2>&1 > /dev/null || {
        printf '%s\n' "mpv is not installed on your \$PATH." >&2
        exit 4
    }
    type bc 2>&1 > /dev/null || {
        printf '%s\n' "WARNING: bc is not installed on your \$PATH." >&2
        printf '%s\n' "WARNING: speed control will not work." >&2
    }
    type socat 2>&1 > /dev/null && {
        SOCKETCOMMAND="socat - $SOCKET"
        return
    }

    printf '%s\n' "socat is not installed on your \$PATH." >&2
    exit 4
}

validateSocket() {
    test "$PLAYFLAG" != "true" && {
        # test if socket exists
        test -S $SOCKET || {
            printf '%s\n' "$SOCKET does not exist." >&2
            exit 2
        }

        # test if socket is open
        status="$(getPauseStatus)"
        test "$status" = "N/A" && {
            printf '%s\n' "$SOCKET is not currently open." >&2
            exit 3
        }
    } || {
        return
    }
}

# quit mpv process on given socket
killSocket() {
    printf '%s\n' "{ \"command\": [\"quit\"] }" | $SOCKETCOMMAND > /dev/null
    exit 0
}

# kill all instances of mpv running under your user
killAllMpv() {
    pkill "mpv" 2>&1 > /dev/null
    exit 0
}

# formats and echos according to $FORMATSTRING
formatPrint() {

    # this is super hacky but works!
    FORMATSTRING=$(echo $FORMATSTRING | sed "
    s#%year%#$(getMetadata date)#g
    s#%genre%#$(getMetadata genre)#g
    s#%title%#$(getMetadata title)#g
    s#%album%#$(getMetadata album)#g
    s#%artist%#$(getMetadata artist)#g
    s#%albumartist%#$(getMetadata album_artist)#g

    s#%speed%#$(getSpeed)#g
    s#%time%#$(elaspedTime)#g
    s#%volume%#$(getValue volume)#g
    s#%length%#$(trackLength)#g
    s#%muted%#$(getMuteStatus)#g
    s#%status%#$(getPauseStatus)#g
    s#%percentage%#$(getPercentage)#g
    s#%filename%#$(getMediaFilename)#g
    s#%repeat%#$(getLoopStatus loop)#g
    s#%single%#$(getLoopStatus loop-file)#g
    s#%playlistlength%#$(getValue playlist-count)#g
    s#%position%#$(($(getValue playlist-pos) + 1))#g

    s#%precisetime%#$(preciseElaspedTime)#g
    s#%frame%#$(getFrameNumber)#g

    s#%%##g
    ")

    echo "${FORMATSTRING}"
}

# print default status of mpv instance
printDefaultStatus() {
    FORMATSTRING="
%artist% - %title%
\n[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
\nspeed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
    formatPrint
}

main() {
    validateDeps

    # get the user defined socket before anything else
    for arg in "$@"; do

        test "$SOCKETFLAG" = "true" && {
            SOCKET=$arg
            SOCKETFLAG=false
        }

        case "$arg" in
            -a) PLAYFLAG=true   ;;
            -S) SOCKETFLAG=true ;;
            -h) usage 0         ;;
        esac
    done

    validateSocket

    for arg in "$@"; do
        case "$arg" in
            -a)
                test "$FORMATFLAG" = "true" && FORMATFLAG=false
                ;;
            -f)
                test "$APPENDFLAG" = "true" && APPENDFLAG=false
                ;;
            --) ;;
            # use ? wildcard to match all other options
            -?)
                test "$FORMATFLAG" = "true" && FORMATFLAG=false
                test "$APPENDFLAG" = "true" && APPENDFLAG=false
                ;;
        esac

        test "$FORMATFLAG" = "true" && {
            FORMATSTRING="$FORMATSTRING $arg"
        }
        test "$APPENDFLAG" = "true" && {
            APPENDSTRING="$APPENDSTRING $arg"
        }

        case "$arg" in
            -f) FORMATFLAG=true ;;
            -a) APPENDFLAG=true ;;
        esac
    done

    for arg in "$@"; do
        case "$arg" in
            -a)
                test "$QUIETFLAG" = "true" && {
                    phraseAppendTracks &
                } || {
                    phraseAppendTracks
                }
                exit
                ;;
            -f)
                formatPrint
                QUIETFLAG=true
                ;;
        esac
    done

    while getopts "hqS:s:t:v:V:r:R:x:X:zpPmlLiafFkK" opt; do
        case "$opt" in
            s)  setTimeRelative $OPTARG   ;;
            t)  setTimeAbsolute $OPTARG   ;;
            v)  setVolumeRelative $OPTARG ;;
            V)  setVolumeAbsolute $OPTARG ;;
            r)  setTrackRelative $OPTARG  ;;
            R)  setTrackAbsolute $OPTARG  ;;
            x)  setSpeedRelative $OPTARG  ;;
            X)  setSpeedAbsolute $OPTARG  ;;
            p)  togglePause               ;;
            P)  alwaysPlay                ;;
            m)  toggleMute                ;;
            l)  toggleLoopFile            ;;
            L)  toggleLoopPlaylist        ;;
            z)  shufflePlaylist           ;;
            i)  getPlaylist               ;;
            k)  killSocket                ;;
            K)  killAllMpv                ;;
            \?) usage 1                   ;;
        esac
    done

    test "$QUIETFLAG" != "true" && printDefaultStatus
}

for arg in $ARGS; do
    test "$arg" = "-q" && QUIETFLAG=true
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
