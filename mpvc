#!/usr/bin/env sh
#
# fyr - 2019 (c) MIT | /bin/sh mpvc
# gmt4 - 2022 | fork & contributions
# control mpv remotely using JSON ipc
# https://mpv.io/manual/master/#json-ipc

PROGNAME=$(basename "$0")
PROGVERSION="1.3"

usage() {
    cat >&2 << EOF
Usage: $PROGNAME [-S "socket"] [-a "filenames"] [-o "path"] [-f "format string"]
    -p | --toggle       : Toggle playback.
    -s | --stop         : Always stop playback.
    -P | --play         : Always start playback.
    -f | --format       : Enter a formatting string.
    -a | --add          : Add files to playlist from given path (see --load for stdin).
    -i | --playlist     : Print filenames of tracks to fit within terminal.
    -I | --fullplaylist : Print all filenames of tracks in current playlist.
    -o | --save         : Save current playlist to given path.
    -l | --load         : Load playlist from given path (stdin if none is specified).
    -o | --autosave     : Auto save current playlist to ${MPVC_PLAYLIST##$HOME/}.
    -l | --autoload     : Auto load playlist from ${MPVC_PLAYLIST##$HOME/}.
    -l | --lsplaylists  : List playlist from ${MPVC_PLAYLIST##$HOME/}.
    -j | --track        : Go forwards/backwards through the playlist queue.
    -J | --tracknum     : Jump to playlist item number.
    -z | --shuffle      : Shuffle the current playlist.
    -l | --loop         : Loop currently playing playlist.
    -L | --loopfile     : Loop currently playing file.
    -v | --vol          : Increase/decrease volume relative to current volume.
    -V | --volume       : Set absolute volume.
    -m | --mute         : Toggle sound.
    -t | --seek         : Increases/decreases time relatively, accepts % values.
    -T | --time         : Set absolute time.
    -x | --speed        : Increase/decrease speed relative to the current speed.
    -X | --speedval     : Set absolute speed.
    -I | --image        : Enable adding of images to the queue.
    -k | --kill         : Kill the mpv process controlling the given socket.
    -K | --killall      : Kill all mpv processes indiscriminately.
    -S | --socket       : Set socket location [default: $MPVC_SOCKET].
    -q | --quiet        : Surpress all text output.
    -Q | --vid=no       : Start mpv with video output disabled.
    -- |                : After adding files options after -- are passed to mpv.
    -h | --help         : Print this help.

Formatting:
    \`$PROGNAME --format\` will interpret the following delimiters if they are found:

    %name%, %path%, %dir%, %title%, %artist%, %album%, %albumartist%, comment%,
    %genre%, %year%, %percentage%, %playlistlength%, %position%, %repeat%,
    %single, %status%, %time%, %precisetime%, %speed%, %length%, %remaining%,
    %volume%, %muted%, %frame%, %width%, %height%, %ab-loop-a%, %ab-loop-b%

MPC compatibility layer:
    mpvc features a nearly complete compatibility layer for mpc commands in
    addition to GNU style arguments. http://linux.die.net/man/1/mpc

Exit codes:
    0: Program ran succesfully.
    1: Input Argument error.
    2: Socket does not exist.
    3: Socket is not currently open.
    4: Dependency error.
EOF
}

equiet() { "$@" 2> /dev/null; }
oquiet() { "$@" 1> /dev/null; }
quiet()  { "$@" > /dev/null 2>&1; }
quietcheck(){ if [ "$QUIETFLAG" = "true" ]; then quiet "$@"; else "$@"; fi; }

warn()   { echo "$@" >&2; }
eeprintf() { e=$1; shift; warn "$@"; exit "$e"; }

mpvc_defaults()
{
    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
    MPVC_CONFIG_DIR="${MPVC_HISTORY:-$XDG_CONFIG_HOME/mpvc}"
    MPVC_DATABASE="${MPVC_DATABASE:-$MPVC_CONFIG_DIR/db.m3u}"
    MPVC_PLAYLIST="${MPVC_PLAYLIST:-$MPVC_CONFIG_DIR/playlist}"
    MPVC_SOCKET="${MPVC_SOCKET:-$MPVC_CONFIG_DIR/mpvsocket}"
    MPVC_SOCKETCMD="socat - $MPVC_SOCKET"
    MPVOPTIONS="${MPVOPTIONS:---no-audio-display --no-input-terminal}"
    # print default status of mpv instance
    [ -z "$FORMATSTRING" ] && FORMATSTRING="\
%artist% - %title%
[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
speed:%speed%x volume:%volume%% muted:%muted% repeat:%repeat% single:%single%"
    # validate deps
    quiet type mpv || eeprintf 4 "Cannot find mpv on your \$PATH."
    quiet type socat || type nc || eeprintf 4 "Cannot find socat or nc on your \$PATH."
    [ -z "$MPVC_SOCKETCMD" ] && MPVC_SOCKETCMD="socat - $MPVC_SOCKET"
    [ -z "$MPVC_SOCKETCMD" ] && MPVC_SOCKETCMD="nc -U -N $MPVC_SOCKET"
}

# Load user config
mpvc_config()
{
    mpvc_defaults
    # if not present, create config dir
    [ ! -d "$MPVC_CONFIG_DIR" ] && mkdir -p "$MPVC_CONFIG_DIR"
    [ ! -d "$MPVC_PLAYLIST" ] && mkdir -p "$MPVC_PLAYLIST"
}

## Retrieval Functions ########################################################

# match given filename string to appropriate output
# fn args: filename
cleanFilename() {
    filename="$1"
    result="$1"
    case "$filename" in
        *.googlevideo.com/*) filename="mps-yt stream" ;;
        *youtu*|watch*) result="$(curl -sL "https://youtube.com/oembed?url=$filename" | mpvc_getjson '"title":')" ;;
        *) [ -e "$filename" ] && result=${filename##*/} ;;
    esac
    printf "$result"
}

# fn args: media-title, filename, path
getMediaProperties() {
    mpvc_cmd "get_property" "$1" | escapeChars '[&#]'
}

# fn args: date, genre, title, album, artist, album_artist
getMetadata() {
    cmd="metadata/by-key/$1"
    [ "$1" = "title" ] && cmd=media-title
    metadata=$(mpvc_get "$cmd")
    case "$metadata" in
        '') result="N/A" ;;
        *)  result=$(cleanFilename "$metadata")
    esac
    echo "$result" | escapeChars '[&#]'
}

mpvc_getjson() {
    awk -F ',"' -v jf="$1" '{
        gsub("[{}]", "");
        gsub("\\\\u00", "\\x");
        for (i=1; i<=NF; i++) {
            if ($i ~ jf){ r=$i; sub(jf, "", r); gsub("[\"]", "", r); printf(r); }
        }
    }'
}

mpvc_sockcmd_() { echo "$@" | $MPVC_SOCKETCMD; }
mpvc_sockcmd()  { oquiet mpvc_sockcmd_ "$@"; }
mpvc_cmd() {
    command=$(for i in "$@"; do printf "\"$i\", "; done)
    equiet mpvc_sockcmd_ "{ \"command\": [ $command ] }" | mpvc_getjson '"data":'
}

# fn args: mute, pause, loop-file, estimated-frame-number, width, height
mpvc_get() {
    mpvc_cmd "get_property" "$1"
}

# fn args: filename, idle-active, playlist-count, playlist-pos, playback-time,
#          playtime-remaining, time-remaining, percent-pos, duration, volume
mpvc_gets() {
    result=$(mpvc_cmd "get_property_string" "$1")
    case "$1" in
        volume|duration|percent-pos|playtime-remaining|playback-time)
            result="${result%%%}"
            result="${result%%.[0-9]*}"
        ;;
    esac
    echo "$result"
}

# fn args: speed
getSpeed() {
    mpvc_gets "speed" | awk '{print substr ($0, 0, 4)}'
}

# fn args: loop-file, loop-playlist
getLoopStatus() {
    status=$(mpvc_get "$1")
    case "$status" in
        true|inf) loop="yes" ;;
        false)    loop="no"  ;;
        *)        loop="N/A" ;;
    esac
    echo "$loop"
}

getMuteStatus() {
    muted="$(mpvc_get mute)"
    case "$muted" in
        true)  muted="yes" ;;
        false) muted="no"  ;;
        *)     muted="N/A" ;;
    esac
    echo "$muted"
}

getPauseStatus() {
    status="$(mpvc_get pause)"
    case "$status" in
        true)  status="paused"  ;;
        false) status="playing" ;;
        *)     status="N/A"     ;;
    esac
    echo "$status"
}

mpvc_get_playlist_once() {
    mpvc_cmd "get_property_string" "playlist" |
    awk '
        BEGIN { RS="filename\\\\:" }
        {
            gsub("\\\\", ""); sub("^[[]|]|,$", ""); sub("\n", "");
            sub(",current:true", ""); sub(",playing:true", "");
            if (length($0)>0) print $0
        }'
}

# fn args: $1: filename $2: full path flag to skip basename
getPlaylistFilename() {
    track="$1"
    fullPath="$2"
    filename=$(mpvc_gets "playlist/$track/filename")
    [  "$fullPath" != "fullpath" ] && filename=$(cleanFilename "$filename")
    echo "$filename"
}

# print filenames in current playlist
getPlaylist() {
    i=0
    fullPlaylist="$1"
    tracks=$(mpvc_gets playlist-count)
    currentTrack=$(mpvc_gets playlist-pos)

    if [ -z "$tracks" ] || [ "$tracks" -eq 0 ]; then
        eeprintf 1 "Socket ${MPVC_SOCKET##$HOME/} is currently idle."
    fi
    # by default, display only tracks fitting terminal, otherwise, display all
    FIRST=0
    LAST=$tracks
    [ "$fullPlaylist" != "full" ] && calculateTerminalHeight "$currentTrack" "$tracks"

    mpvc_get_playlist_once |
    while read filename;
    do
        if [ $i -ge $FIRST -a $i -lt $LAST ]; then
            filename=$(cleanFilename "$filename")
            case "$i" in
            $currentTrack) [ "$COLOURFLAG" != "nocolour" ] && printf '%2d  [7m%s[0m\n' "$i" "$filename";;
            *) printf '%2d  %s\n' "$i" "$filename";;
            esac
        fi
        i=$(( $i + 1 ))
    done
    QUIETFLAG="true"
}

# open mpvc to retrieve all metadata from a playlist file
getFilenameMetadata() {
    isInt "$1" || exit 1
    trackId="$1"
    getPlaylistFilename "$trackId" fullpath
}

# saves playlist to file but with no path checking. we live dangerously
savePlaylist() {
    savePlaylist="$1"
    if [ -z "$savePlaylist" ]; then
        savePlaylist="/dev/stdout"
    else
        if [ -e "$savePlaylist" ]; then
            echo "Playlist $savePlaylist exists! Overwrite? [Y/n] "; read -r key
            [ "$key" != "Y" ] && return
        fi
        echo "Adding files to $savePlaylist ..."
    fi
    mpvc_get_playlist_once > "$savePlaylist"
    QUIETFLAG="true"
}

mpvc_autosave_playlist() {
    savePlaylist "$MPVC_PLAYLIST/${1:-$(date -Imin)}"
}

mpvc_autoload_playlist() {
    loadPlaylist < "$MPVC_PLAYLIST/${1:-$(date -Imin)}"
}

mpvc_lsplaylists() {
    ls -1d "$@" "$MPVC_PLAYLIST"/*
}

# loads a playlist from stdin. Note the buffer trick to avoid clear wiping the playlist.
loadPlaylist() {
    QUIETFLAG="true"
    buffer=""
    while read -r line; do buffer="${buffer}\n${line}"; done
    [ -z "$buffer" ] && return
    [ "$1" = "clear" ] && clearPlaylist
    printf "$buffer\n" | while read -r line; do appendTracks "$line"; done
}

mpvc_dbinit() {
    locate -b '*.mp3' '*.mp4' '*.ogg' '*.opus' |
        sed 's|^\(/.*/\).*|\1|' | sort | uniq |
        tee "$MPVC_DATABASE"
}

mpvc_dblist() {
    cat "$MPVC_DATABASE"
    for playlist in $(printf "%s\n" $MPVC_PLAYLIST/*); do echo $playlist; done
}

## Control Functions ##########################################################

appendTrack() {
    filename="$*"
    # require absolute paths
    case "$filename" in
        /*) ;; *) [ -e "$filename" ] && filename="$(pwd)/$filename" ;;
    esac
    # skip over various other filetypes and images unless wanted
    case "$filename" in
        *.txt|*.log|*.cue) return ;;
        *.png|*.jpg|*.jpeg|*.gif|*.psd|*.pdf) [ "$IMAGEFLAG" != "true" ] && return ;;
        http*) ;;
    esac
    if [ -n "$filename" ]; then
        quiet mpvc_cmd "loadfile" "$filename" "append-play"
        echo "Adding: $(cleanFilename "$filename")"
    fi
}

appendTracks() {
    shiftcount=0
    QUIETFLAG="true"
    if ! quiet pgrep -f "mpv .*$MPVC_SOCKET"; then
        mpvc_startmpv --really-quiet --idle=once
    fi
    for arg in "$@"; do
        case "$arg" in
        http*) appendTrack "$arg"; _=$((shiftcount+=1)) ;;
        *)     if [ -e "$arg" ]; then appendTrack "$arg"; _=$((shiftcount+=1)); fi
        esac
    done
    return $shiftcount
}

playNext() {
    QUIETFLAG="true"
    # add track to the playlist
    appendTracks "$1"
    # find position of track to move
    trackToMove="$(( $(mpvc_gets playlist-count) - 1 ))"
    # find position of current track
    newTrackPosition="$(( $(mpvc_gets playlist-pos) + 1 ))"
    # set position of next track
    moveTrack "$trackToMove" "$newTrackPosition"
}

setTimeRelative() {
    time=$(mpvc_gets playback-time)
    case "$1" in
        *%*) mpvc_cmd "set_property_string" "percent-pos" "${1%%%}"; return ;;
        -*) timeArg=${1##-}; minusFlag=true ;;
        +*) timeArg=${1##+}; minusFlag=false ;;
        *)  timeArg=$1 ;;
    esac
    timeSec=$(parseTimeString "$timeArg") || exit $?
    case "$minusFlag" in
        true) time=$((time - timeSec)) ;;
        *)    time=$((time + timeSec)) ;;
    esac
    mpvc_cmd "set_property_string" "percent-pos" "$time"
}

setTimeAbsolute() {
    timeSec=$(parseTimeString "$1") || exit $?
    trackTime=$(mpvc_gets duration)
    if [ "$timeSec" -ge "$trackTime" ]; then
        echo "Given time is greater than track length! ($(getTrackLength))"
        QUIETFLAG="true"
        return 1
    fi
    mpvc_cmd "set_property_string" "playback-time" "$timeSec"
}

setVolume () {
    isInt "$1" || return 1
    volume=$(mpvc_gets volume)
    [ "$volume" = "error" ] && eeprintf 1 "Currently playing media does not have sound."
    case "$2" in
        relative) volume=$((volume + $1)) ;;
        absolute) volume=$1;;
    esac
    [ "$volume" -lt 0 ] && eeprintf 1 "Volume cannot be set lower than 0%"
    [ "$volume" -gt 130 ] && eeprintf 1 "Volume cannot be set great than 130%"
    mpvc_cmd "set_property_string" "volume" "$volume"
}

setSpeed() {
    isFloat "$1" || return 1
    speed=$(getSpeed)
    case "$2" in
        absolute) speed=$1 ;;
        relative) speed=$(echo "$speed $1" | awk '{print $1 + $2}') ;;
    esac
    mpvc_cmd "set_property_string" "speed" "$speed"
}

setTrack() {
    isInt "$1" || return 1
    currentTrack=$(mpvc_gets playlist-pos)
    trackCount=$(mpvc_gets playlist-count)
    [ "$currentTrack" = "null" ] && currentTrack=0
    case "$2" in
        absolute) newTrack=$1 ;;
        relative)
            newTrack=$((currentTrack + $1))
            # if time is greater than 10 seconds, set time to 0
            if [ "$newTrack" -lt "$currentTrack" ]; then
                seconds=$(mpvc_gets playback-time)
                [ "$seconds" -ge 10 ] && setTimeAbsolute 0 && return
            fi
            if [ "$newTrack" -ge "$trackCount" ]; then
                [ "$(getLoopStatus loop-playlist)" = "yes" ] && newTrack=0
            fi
            if [ "$newTrack" -lt 0 ]; then
                newTrack=0
                [ "$(getLoopStatus loop-file)" = "yes" ] && newTrack=$trackCount
            fi
        ;;
    esac
    if [ "$newTrack" -lt 0 ] || [ "$newTrack" -ge "$trackCount" ]; then
        eeprintf 1 "Item $newTrack is out of range of playlist."
    fi
    quiet mpvc_cmd "set_property" "playlist-pos" "$newTrack"
}

moveTrack() {
    isInt "$1" || exit 1
    QUIETFLAG="true"
    if [ -z "$2" ]; then
        trackToMove=$(mpvc_gets playlist-pos)
        newTrackPosition=$1
    else
        trackToMove=$1
        newTrackPosition=$2
        trackCount=$(mpvc_gets playlist-count)
        if [ "$trackToMove" -lt 0 ] || [ "$trackToMove" -ge "$trackCount" ]; then
            eeprintf 1 "Item $trackToMove is out of range of playlist."
        fi
    fi

    [ "$newTrackPosition" -lt 0 ] &&
        eeprintf 1 "Position $newTrackPosition is out of range of playlist."
    [ "$newTrackPosition" -eq 1 ] && newTrackPosition=0
    quiet mpvc_cmd "playlist-move" "$trackToMove" "$newTrackPosition"

    quietcheck getPlaylist
}

removeTrack() {
    trackId=$1
    if [ "$trackId" = "current" ]; then
        oquiet mpvc_cmd "playlist-remove" "$trackId"
        return;
    fi

    isInt "$trackId" || return 1
    trackCount=$(mpvc_gets playlist-count)
    if [ -z "$trackCount" ] || [ "$trackId" -lt 0 ] || [ "$trackId" -ge "$trackCount" ]; then
        warn "Item $trackId is out of range of playlist."
    fi
    filename="$(getPlaylistFilename $trackId)"
    oquiet mpvc_cmd "playlist-remove" "$trackId"
    quietcheck warn "$filename has been removed from the playlist."
}

alwaysPlay() {
    currentTrack=$(mpvc_gets playlist-pos)
    if [ "$currentTrack" = "null" ]; then
        setTrack 0 absolute; return
    fi
    quiet mpvc_cmd "set_property_string" "pause" "no"
}

setPause() {
    mpvc_sockcmd '{ "command": ["set_property", "pause", '"$1"' ] }'
}

togglePause() {
    quiet mpvc_cmd "cycle-values" "pause" "yes" "no"
}

mpvc_toggle_window() {
    quiet mpvc_cmd "cycle-values" "force-window" "yes" "no"
}

mpvc_toggle_video() {
    quiet mpvc_cmd "cycle" "video"
}

toggleMute() {
    [ -n "$1" ] && quiet mpvc_cmd "set_property_string" "mute" "$1" && return
    quiet mpvc_cmd "cycle-values" "mute" "yes" "no"
}

toggleLoopFile() {
    [ -n "$1" ] && quiet mpvc_cmd "set_property_string" "loop-file" "$1" && return
    quiet mpvc_cmd "cycle-values" "loop-file" "yes" "no"
}

toggleLoopPlaylist() {
    [ -n "$1" ] && quiet mpvc_cmd "set_property_string" "loop-playlist" "$1" && return
    quiet mpvc_cmd "cycle-values" "loop-playlist" "yes" "no"
}

shufflePlaylist() {
    QUIETFLAG="true"
    quiet mpvc_cmd "playlist-shuffle"
    echo "Playlist shuffled."
    [ "$(getLoopStatus loop-playlist)" != "yes" ] && toggleLoopPlaylist inf
}

cropPlaylist() {
    QUIETFLAG="true"
    quiet mpvc_cmd "playlist-clear"
    quietcheck getPlaylist
}

clearPlaylist() {
    # kill any running process of mpvc add
    #quiet pgrep -f "mpvc add" && pkill -f "mpvc add"
    cropPlaylist
    removeTrack 0
    echo "Playlist cleared."
}

## Time Functions #############################################################

getElapsedTime() {
    time=$(mpvc_gets playback-time)
    formatTime "$time"
}

getElapsedTimePrecise() {
    time=$(mpvc_gets playback-time 0.0)
    bigTime=${time%%.*}
    tinyTime=${time#*.}
    formatTime "$bigTime" "$tinyTime"
}

getTrackLength() {
    duration=$(mpvc_gets duration)
    formatTime "$duration"
}

playtimeRemaining() {
    playtime=$(mpvc_gets playtime-remaining)
    formatTime "$playtime"
}

# format seconds into HH:MM:SS format
formatTime() {
    [  "$1" = "null" ] && return 1
    rawSeconds=$1
    milleSeconds=$2
    seconds=$((rawSeconds % 60))
    minutes=$((rawSeconds / 60))
    hours=$((minutes / 60))
    minutes=$((minutes - hours*60))
    if [ -z "$milleSeconds" ]; then
        printf "%02d:%02d:%02d" "$hours" "$minutes" "$seconds"
    else
        printf "%02d:%02d:%02d.%d" "$hours" "$minutes" "$seconds" "$milleSeconds"
    fi
}

## Formatting and Printing Functions ##########################################

# formats and prints according to $FORMATSTRING
formatPrint() {
    # modified format string
    F="$FORMATSTRING"
    # not that nice, in fact, way more ugly, but too way faster
    for f in $(echo "$F" | sed 's#/# #g')
    do
        case $f in
        (*%status%*) F=$(echo "$F" | sed "s#%status%#$(getPauseStatus)#g") ;;
        (*%year%*) F=$(echo "$F" | sed "s#%year%#$(getMetadata date)#g") ;;
        (*%genre%*) F=$(echo "$F" | sed "s#%genre%#$(getMetadata genre)#g") ;;
        (*%title%*) F=$(echo "$F" | sed "s#%title%#$(getMetadata title)#g") ;;
        (*%album%*) F=$(echo "$F" | sed "s#%album%#$(getMetadata album)#g") ;;
        (*%artist%*) F=$(echo "$F" | sed "s#%artist%#$(getMetadata artist)#g") ;;
        (*%comment%*) F=$(echo "$F" | sed "s#%comment%#$(getMetadata comment)#g") ;;
        (*%albumartist%*) F=$(echo "$F" | sed "s#%albumartist%#$(getMetadata album_artist)#g") ;;
        (*%speed%*) F=$(echo "$F" | sed "s#%speed%#$(getSpeed)#g") ;;
        (*%time%*) F=$(echo "$F" | sed "s#%time%#$(getElapsedTime)#g") ;;
        (*%precisetime%*) F=$(echo "$F" | sed "s#%precisetime%#$(getElapsedTimePrecise)#g") ;;
        (*%playback-time%*) F=$(echo "$F" | sed "s#%playback-time%#$(mpvc_get playback-time)#g") ;;
        (*%volume%*) F=$(echo "$F" | sed "s#%volume%#$(mpvc_gets volume)#g") ;;
        (*%length%*) F=$(echo "$F" | sed "s#%length%#$(getTrackLength)#g") ;;
        (*%remaining%*) F=$(echo "$F" | sed "s#%remaining%#$(playtimeRemaining)#g") ;;
        (*%muted%*) F=$(echo "$F" | sed "s#%muted%#$(getMuteStatus)#g") ;;
        (*%percentage%*) F=$(echo "$F" | sed "s#%percentage%#$(mpvc_gets percent-pos)#g") ;;
        (*%name%*) F=$(echo "$F" | sed "s#%name%#$(getMediaProperties filename)#g") ;;
        (*%path%*) F=$(echo "$F" | sed "s#%path%#$(getMediaProperties path)#g") ;;
        (*%dir%*) F=$(echo "$F" | sed "s#%dir%#$(mpvc_gets working-directory)#g") ;;
        (*%repeat%*) F=$(echo "$F" | sed "s#%repeat%#$(getLoopStatus loop-playlist)#g") ;;
        (*%single%*) F=$(echo "$F" | sed "s#%single%#$(getLoopStatus loop-file)#g") ;;
        (*%playlistlength%*) F=$(echo "$F" | sed "s#%playlistlength%#$(mpvc_gets playlist-count)#g") ;;
        (*%position%*) F=$(echo "$F" | sed "s#%position%#$(($(mpvc_gets playlist-pos) + 1))#g") ;;
        (*%frame%*) F=$(echo "$F" | sed "s#%frame%#$(mpvc_get estimated-frame-number)#g") ;;
        (*%width%*) F=$(echo "$F" | sed "s#%width%#$(mpvc_get width)#g") ;;
        (*%height%*) F=$(echo "$F" | sed "s#%height%#$(mpvc_get height)#g") ;;
        (*%ab-loop-a%*) F=$(echo "$F" | sed "s#%ab-loop-a%#$(mpvc_gets ab-loop-a)#g") ;;
        (*%ab-loop-b%*) F=$(echo "$F" | sed "s#%ab-loop-b%#$(mpvc_gets ab-loop-b)#g") ;;
        esac
    done
    echo "${F}"
}

printFinalOutput() {
    [ "$QUIETFLAG" = "true" ] && return
    # catches if mpv is idle or not
    if [ "$(mpvc_gets idle-active)" = "yes" ]; then
        warn "MPV on ${MPVC_SOCKET##$HOME/} is currently idle."; return
    fi
    formatPrint
}

## Misc Functions #############################################################

escapeChars() {
    awk -v r="$1" '{ gsub(r, "\\\\&"); print $0; }'
}

isInt() {
    printf '%d' "$1" >/dev/null
}

isFloat() {
    [ -z "${1##*.*}" ] && printf '%f' "$1" >/dev/null
}

calculateTerminalHeight() {
    ctrack="$1"
    tracks="$2"
    lines=$(tput lines)
    crow=3
    rows=$((lines - crow))
    halfrows=$((rows / 2))
    [ "$ctrack" = "null" ] && ctrack=0
    if [ "$tracks" -le $rows ]; then
        FIRST=0; LAST=$tracks
    elif [ "$ctrack" -le $halfrows ]; then
        FIRST=0; LAST=$rows
    elif [  $((ctrack + halfrows)) -ge "$tracks" ]; then
        FIRST=$((tracks - rows)); LAST=$tracks
    elif [  $((ctrack + halfrows)) -lt "$tracks" ]; then
        FIRST=$((ctrack - halfrows)); LAST=$((ctrack + halfrows))
    fi
}

parseTimeString() {
    if ! echo "$1" | grep -q -e "^\([0-9.]*:\)\{0,2\}[0-9.]*$" -e "^[0-9]*[sSmMhH]$"; then
        warn "Timestamp formats must match either H:M:S with hour and minute fields optional,"
        warn "or a single integer number with a unit of time appended: h, m, s."
        exit 1
    fi
    case "$1" in
        *s|*S|*m|*M|*h|*H)
            timeInt=${1%%?}
            isInt "$timeInt" || exit 1
            case "$1" in
                *h|*H) timeInt=$((timeInt * 60 * 60)) ;;
                *m|*M) timeInt=$((timeInt * 60))      ;;
            esac
            ;;
        *)
            timeInt=$(printf '%s' "$1" |
                awk -F ':' '{ for (x=1; x<=NF; x++) t=t*60+$x; print t }')
            ;;
    esac
    printf "%d" "$timeInt"
}

mpvc_validate_socket() {
    # test if socket exists
    [ ! -S "$MPVC_SOCKET" ] && eeprintf 2 "Socket ${MPVC_SOCKET##$HOME/} does not exist. Use mpv --input-ipc-server to start one."
    # test if socket is open
    [ "$(getPauseStatus)" = "N/A" ] && eeprintf 3 "No files added to ${MPVC_SOCKET##$HOME/}."
}

mpvc_get_version() {
    mpv --version
    echo "MPVC Release $PROGVERSION (c) Laurence Willetts MIT"
}

mpvc_idleloop() {
    mpvc_cmd "unobserve_property" 1
    mpvc_cmd "observe_property" 1 "$@"
    socat -t0 -,ignoreeof "$MPVC_SOCKET"
}

mpvc_startmpv() {
    exec mpv --input-ipc-server="$MPVC_SOCKET" $MPVOPTIONS "$@" &
    # wait until mpv starts up
    until [ -n "$(mpvc_gets idle-active)" ]; do sleep 0.1; done
}

main() {
    mpvc_config
    case "$1" in
        -c|--crop|crop) ;;
        -C|--clear|clear) ;;
        -a|add|append|-A|playnext|--playnext|mpv|--mpv|cmd|sockcmd|-q|--quiet) ;;
        load|--load|autoload|--autoload|lsplaylists|--lsplaylists|dbinit|--dbinit|dblist|--dblist) ;;
        version|--version|help|--help|-h|--list-options|-Q|--vid=no|-S) ;;
        *) mpvc_validate_socket;; # otherwise, validate socket
    esac
    for arg in "$@"; do
        # grab mpv options first if any
        [ "$arg" = "--" ] && { MPVFLAG=true; shift; continue; }
        [ "$MPVFLAG" = "true" ] && { MPVOPTIONS="$MPVOPTIONS $arg"; shift; continue; }
        case "$1" in
            # mpc compatibility layer
            play|start|resume)
                shift
                case "$1" in
                    '') ;;
                    $) setTrack "$(( $(mpvc_gets playlist-count) - 1 ))" absolute;;
                    *) isInt "$1" && setTrack "$1" absolute;;
                esac
                alwaysPlay
            ;;
            vol|volume)
                shift
                case "$1" in
                    '') eeprintf 1 "Specify volume in/decrease amount or absolute amount." ;;
                    +*) setVolume "$1" relative ;;
                    -*) setVolume "$1" relative ;;
                    *)  setVolume "$1" absolute ;;
                esac
            ;;
            repeat)
                shift
                case "$1" in
                    on)  toggleLoopPlaylist inf ;;
                    off) toggleLoopPlaylist no  ;;
                    *)   toggleLoopPlaylist     ;;
                esac
            ;;
            single)
                shift
                case "$1" in
                    on)  toggleLoopFile yes ;;
                    off) toggleLoopFile no  ;;
                    *)   toggleLoopFile     ;;
                esac
            ;;
            metadata) shift; getFilenameMetadata "$1" ;;
            pause)    setPause true       ;;
            next)     setTrack 1 relative ;;
            prev)     setTrack -1 relative;;
            move)     shift; moveTrack "$1" "$2" ;;
            mute)     toggleMute yes     ;;
            unmute)   toggleMute no      ;;
            pretty)   eeprintf 1 "$PROGNAME: $* not implemented" ;;
            find)     eeprintf 1 "$PROGNAME: $* not implemented" ;;

            add|-a|--append) appendTracks "$@"; shift "$((shiftcount+1))" ;;
            mpv|--mpv)       mpvc_startmpv --idle=yes --input-terminal; return;;
            # consume) to implement # add on|off toggle
            # random) MPV doesn't have this control option!

            # GNU-style options
            -t|--seek|seek)                  shift; setTimeRelative "$1"    ;;
            -T|--time|time)                  shift; setTimeAbsolute "$1"    ;;
            -v|--vol)                        shift; setVolume "$1" relative ;;
            -V|--volume)                     shift; setVolume "$1" absolute ;;
            -x|--speed|speed)                shift; setSpeed "$1" relative  ;;
            -X|--speedval)                   shift; setSpeed "$1" absolute  ;;
            -j|--track)                      shift; setTrack "$1" relative  ;;
            -J|--tracknum)                   shift; setTrack "$1" absolute  ;;
            -r|--remove|rm|remove|del)       shift; removeTrack "$1"        ;;
            -A|--playnext|playnext)          shift; playNext "$1"           ;;
            -o|--save|save)                  shift; quietcheck savePlaylist "$1"       ;;
            --load|load)                     shift; quietcheck loadPlaylist            ;;
            --loadc|loadc)                   shift; quietcheck loadPlaylist "clear"    ;;

            --autosave|autosave)             shift; mpvc_autosave_playlist "$1"; return   ;;
            --autoload|autoload)             shift; mpvc_autoload_playlist "$1"; return   ;;
            --lsplaylists|lsplaylists)       shift; mpvc_lsplaylists "$1"; return       ;;
            --dblist|dblist)                 shift; mpvc_dblist; return          ;;
            --dbinit|dbinit)                 shift; mpvc_dbinit; return          ;;
            --cycle|cycle)                   shift; mpvc_cmd cycle "$@"; return;;
            --set|set|s)                     shift; mpvc_cmd set_property "$@"; return;;
            --sets|sets|ss)                  shift; mpvc_cmd set_property_string "$@"; return;;
            --gets|gets|gs)                  shift; mpvc_cmd get_property_string "$@"; return;;
            --togglev|togglev)               shift; mpvc_toggle_video ;;
            --togglew|togglew)               shift; mpvc_toggle_window ;;
            --idleloop|idleloop)             shift; mpvc_idleloop "$@"; return ;;
            --cmd|cmd)                       shift; mpvc_cmd "$@"; return ;;
            --sockcmd|sockcmd)               shift; mpvc_sockcmd "$1"; return ;;

            -k|--kill|kill)                  quiet mpvc_cmd "quit"; return  ;;
            -K|--killall|killall)            quiet pkill -f "mpv "; return  ;;
            -s|--stop|stop)                  setPause true; setTimeAbsolute 0 ;;
            -P|--play)                       alwaysPlay                     ;;
            -p|--toggle|toggle)              togglePause                    ;;
            -m|--mute)                       toggleMute                     ;;
            -i|--playlist|playlist)          getPlaylist "";                ;;
            -I|--fullplaylist|fullplaylist)  getPlaylist "full";            ;;
            -L|--loop|loop)                  toggleLoopPlaylist             ;;
            -l|--loopfile|loopfile)          toggleLoopFile                 ;;
            -z|--shuffle|shuffle)            quietcheck shufflePlaylist     ;;
            -c|--crop|crop)                  quietcheck cropPlaylist        ;;
            -C|--clear|clear)                quietcheck clearPlaylist       ;;

            # global argument parsing
            -f|--format)                     shift; FORMATSTRING="$1"       ;;
            -S|--socket)                     shift; MPVC_SOCKET="$1"; mpvc_config ;;
            -Q|--vid=no)                     MPVOPTIONS="$MPVOPTIONS --vid=no"; ;;
            --image)                         IMAGEFLAG=true;                ;;
            -q|--quiet)                      QUIETFLAG=true;                ;;
            --mono|mono)                     COLOURFLAG=nocolour;           ;;
            --colour|colour)                 COLOURFLAG=colour;             ;;
            --version|version)               mpvc_get_version;              ;;
            --list-options)                  usage; exit 0;                 ;;
            -h|--help|h|help)                usage; exit 0;                 ;;
            -?)                              usage; exit 1;                 ;;
        esac
        [ -n "$1" ] && shift
    done
    # produce format strings last
    quietcheck printFinalOutput
}

quietcheck main "$@";
