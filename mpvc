#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# control mpv remotely using JSON ipc
# depends on: socat bc and a sane unix environment
# https://mpv.io/manual/master/#json-ipc

ARGS="$@"

SOCKET=${SOCKET:-/tmp/mpvsocket}

usage() {
    cat << EOF
Usage: $(basename $0) [-S socket] [-k] [-f "format string"] [-qstvVrRzZpmlLh]
    -S : Set socket location [default: $SOCKET].
    -q : Produce no output.
    -f : Enter a format string (see Formatting).
    -s : Increase/decrease time in seconds.
    -t : Set absolute time in seconds.
    -v : Increase/decrease volume relatively to the current volume.
    -V : Set absolute volume.
    -r : Go forwards/backwards through the playlist queue.
    -R : Jump to playlist item number.
    -z : Increase/decrease speed relatively to the current speed.
    -Z : Set absolute speed.
    -p : Toggle play/paused.
    -m : Toggle mute/unmuted.
    -l : Loop currently playing file.
    -L : Loop currently playing playlist.
    -k : Kill the current mpv process controlling the named socket.
    -h : Print this help.

Formatting:
    $(basename $0) will interpret the following delimiters if they are found:
        %filename%
        %year%
        %genre%
        %title%
        %album%
        %artist%
        %albumartist%
        %time%
        %length%
        %percentage%
        %status%
        %position%
        %playlist%
        %speed%
        %volume%
        %muted%
        %repeat%
        %single%

Exit codes:
     0 : Program ran succesfully.
     1 : Input Argument error.
     2 : Socket does not exist.
     3 : Socket is not currently open.
EOF

    test -z $1 && exit 0 || exit $1
}

    # Retrieval Functions
###############################################################################

getMediaFilename() {
    mediaFilename=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"media-title\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    mediaFilename=$(printf '%s\n' "$mediaFilename" | cut -d: -f 2 | \
        cut -d, -f 1 | sed s/\"//g)

    printf "$mediaFilename"
}

getMetadata() {
    test -z $1 && return
    property=$1

    metadata=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"metadata/by-key/${property}\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    errorCheck=$(printf '%s\n' "$metadata" | cut -d\" -f 2)
    metadata=$(printf '%s\n' "$metadata" | cut -d: -f 2 | \
        cut -d, -f 1 | sed s/\"//g)

    test "$errorCheck" = "error" && echo "N/A" || echo "$metadata"
}

getPlaybackTime() {
    time=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
        \"playback-time\"] }" | $SOCKETCOMMAND 2> /dev/null)
    time=$(printf '%s\n' $time | cut -d\" -f 4 | cut -d. -f 1)

    printf "$time"
}

getDuration() {
    duration=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"duration\"] }" | $SOCKETCOMMAND 2> /dev/null)

    duration=$(printf '%s\n' $duration | cut -d: -f 2 | cut -d. -f 1)

    printf "$duration"
}

getPercentage() {
    percentage=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"percent-pos\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    percentage=$(printf '%s\n' "$percentage" | cut -d: -f 2 |
        cut -d, -f 1 | cut -d. -f 1)

    printf "$percentage"
}

getVolume() {
    volume=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
        \"volume\"] }" | $SOCKETCOMMAND 2> /dev/null)
    volume=$(printf '%s\n' $volume | cut -d\" -f 4 | cut -d. -f 1)

    test "$volume" = "error" && printf "N/A" || printf "$volume"
}

getCurrentTrack() {
    currentTrack=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
        \"playlist-pos\"] }" | $SOCKETCOMMAND 2> /dev/null)
    currentTrack=$(printf '%s\n' $currentTrack | cut -d\" -f 4 | cut -d. -f 1)

    printf "$currentTrack"
}

getTrackCount() {
    trackCount=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
            \"playlist-count\"] }" | $SOCKETCOMMAND 2> /dev/null)
    trackCount=$(printf '%s\n' $trackCount | cut -d\" -f 4 | cut -d. -f 1)

    printf "$trackCount"
}

getSpeed() {
    speed=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
            \"speed\"] }" | $SOCKETCOMMAND 2> /dev/null)
    speed=$(printf '%s\n' $speed | cut -d\" -f 4)
    speed=$(printf '%0.2f\n' "$speed")

    printf "$speed"
}

getMuteStatus() {
    muted=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"mute\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    muted=$(printf '%s\n' "$muted" | cut -d: -f 2 | cut -d, -f 1)

    test "$muted" = "true" && muted="yes" || muted="no"
    printf "$muted"
}

getPauseStatus() {
    status=$(printf '%s\n' "{ \"command\": [\"get_property\", \"pause\" ] }" | \
        $SOCKETCOMMAND 2> /dev/null)
    status=$(printf '%s\n' "$status" | cut -d: -f 2 | cut -d, -f 1)

    test $status = "true" && status="paused" || status="playing"

    printf "$status"
}

getLoopFileStatus() {
    loopFile=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"loop-file\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    loopFile=$(printf '%s\n' "$loopFile" | cut -d: -f 2 | cut -d, -f 1 | sed s/\"//g)

    printf "$loopFile"
}

getLoopPlaylistStatus() {
    loopPlaylist=$(printf '%s\n' "{ \"command\": [\"get_property\", \
        \"loop\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    loopPlaylist=$(printf '%s\n' "$loopPlaylist" | cut -d: -f 2 | cut -d, -f 1 | sed s/\"//g)

    printf "$loopPlaylist"
}

    # Control Functions
###############################################################################

setTimeRelative() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }

    time=$(getPlaybackTime)
    time=$((time + $1))

    printf '%s\n' "{ \"command\": [\"set_property\", \
        \"playback-time\", $time ] }" | $SOCKETCOMMAND > /dev/null
}

setTimeAbsolute() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }

    time=$1

    printf '%s\n' "{ \"command\": [\"set_property\", \
        \"playback-time\", $time ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeRelative() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }

    volume=$(getVolume)

    test "$volume" = "error" && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    volume=$((volume + $1))

    test $volume -lt 0 && {
         printf '%s\n' "Volume cannot be set lower than 0%" >&2
         exit 1
    }
    test $volume -gt 130 && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
        \"volume\", $volume ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeAbsolute() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }

    # test if media has sound
    volume=$(getVolume)

    test "$volume" = "error" && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    volume=$1

    test $volume -lt 0 && {
         printf '%s\n' "Volume cannot be set lower than 0%" >&2
         exit 1
    }
    test $volume -gt 130 && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
        \"volume\", $volume ] }" | $SOCKETCOMMAND > /dev/null
}

setTrackRelative() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }

    seconds=$(getPlaybackTime)
    currentTrack=$(getCurrentTrack)
    desiredTrack=$((currentTrack + $1))
    trackCount=$(getTrackCount)

    test $desiredTrack -lt 0 && \
        desiredTrack=0
    test $desiredTrack -ge $trackCount && \
        killProcess

    test "$desiredTrack" -lt "$currentTrack" && \
        test "$seconds" -ge 10 && \
        setTimeAbsolute 0 || \
        printf '%s\n' "{ \"command\": [\"set_property\", \
        \"playlist-pos\", $desiredTrack ] }" | $SOCKETCOMMAND > /dev/null
}

setTrackAbsolute() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "$1 is not an integer." >&2
         exit 1
    }

    currentTrack=$1
    currentTrack=$((currentTrack - 1))
    trackCount=$(getTrackCount)

    test $currentTrack -lt 0 || test $currentTrack -ge $trackCount &&
        {
            printf '%s\n' "Item $currentTrack is out of range of playlist." >&2
            exit 1
        }

    printf '%s\n' "{ \"command\": [\"set_property\", \
        \"playlist-pos\", $currentTrack ] }" | $SOCKETCOMMAND > /dev/null
}

setSpeedRelative() {
    speed=$(getSpeed)

    testDecimal=$(echo "$1" | bc)
    test $testDecimal -eq 0 2> /dev/null && {
        printf '%s\n' "$1 is not a number."
        exit 1
    }

    speed=$(echo "$speed+$1\n" | bc)

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
        \"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

setSpeedAbsolute() {
    speed=$1

    testDecimal=$(echo "$1\n" | bc)
    test $testDecimal -eq 0 2> /dev/null && {
        printf '%s\n' "$1 is not a number."
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
        \"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

alwaysPlay() {
    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", false ] }" | \
        $SOCKETCOMMAND > /dev/null
}

togglePause() {
    status=$(getPauseStatus)
    test $status = "playing" && status="true" || status="false"

    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", $status ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleMute() {
    muted=$(getMuteStatus)

    test "$muted" = "no" && muted="true" || muted="false"

    printf '%s\n' "{ \"command\": [\"set_property\", \"mute\", $muted ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleLoopFile() {
    loopFile=$(getLoopFileStatus)

    test $loopFile = "no" && loopFile="inf" || loopFile="no"

    printf '%s\n' "{ \"command\": [\"set_property_string\", \
        \"loop-file\", \"$loopFile\" ] }" | $SOCKETCOMMAND > /dev/null
}

toggleLoopPlaylist() {
    loopPlaylist=$(getLoopPlaylistStatus)

    test $loopPlaylist = "no" && loopPlaylist="inf" || loopPlaylist="no"

    printf '%s\n' "{ \"command\": [\"set_property_string\", \
        \"loop\", \"$loopPlaylist\" ] }" | $SOCKETCOMMAND > /dev/null
}

    # Time Functions
###############################################################################

elaspedTime() {
    time=$(getPlaybackTime)
    formatTime $time
}

trackLength() {
    duration=$(getDuration)
    formatTime $duration
}

# format seconds into HH:MM:SS format
formatTime() {
    rawSeconds=$1
    seconds=$((rawSeconds % 60))
    minutes=$((rawSeconds / 60))
    hours=$((minutes / 60))

    test $seconds -lt 10 && seconds="0$seconds"
    test $minutes -ge 60 && minutes=$((minutes - hours*60))
    test $minutes -lt 10 && minutes="0$minutes"
    test $hours -lt 10 && hours="0$hours"

    printf '%s\n' "$hours:$minutes:$seconds"
}

    # Misc. Functions
###############################################################################

validateSocat() {
    type socat 2>&1 > /dev/null && {
        SOCKETCOMMAND="socat - $SOCKET"
        return
    }

    printf '%s\n' "socat is not installed on your \$PATH."
    exit 4
}

validateSocket() {
    # test if socket exists
    test -S $SOCKET || {
        printf '%s\n' "$SOCKET does not exist." >&2
        exit 2
    }

    # test if the socket is open and currently being used.
    printf '%s\n' "{ \"command\": [\"get_property\", \
    \"pause\" ] }" | $SOCKETCOMMAND 2> /dev/null > /dev/null || {
        printf '%s\n' "$SOCKET is not currently open." >&2
        exit 3
    }
}

# kill process by socket
killProcess() {
    printf '%s\n' "Killing mpv process on socket $SOCKET."
    pkill -f "$SOCKET"
}

# formats and echos according to $FORMATSTRING
formatPrint() {

    # this is super hacky but works!
    FORMATSTRING=$(echo $FORMATSTRING | sed "
    s#%year%#$(getMetadata date)#;
    s#%genre%#$(getMetadata genre)#;
    s#%title%#$(getMetadata title)#;
    s#%album%#$(getMetadata album)#;
    s#%artist%#$(getMetadata artist)#;
    s#%albumartist%#$(getMetadata album_artist)#;

    s#%speed%#$(getSpeed)#;
    s#%time%#$(elaspedTime)#;
    s#%volume%#$(getVolume)#;
    s#%length%#$(trackLength)#;
    s#%muted%#$(getMuteStatus)#;
    s#%status%#$(getPauseStatus)#;
    s#%playlist%#$(getTrackCount)#;
    s#%percentage%#$(getPercentage)#;
    s#%single%#$(getLoopFileStatus)#;
    s#%filename%#$(getMediaFilename)#;
    s#%repeat%#$(getLoopPlaylistStatus)#;
    s#%position%#$(($(getCurrentTrack) + 1))#;
    ")

    echo "${FORMATSTRING}"
}

# print default status of mpv instance
printStatus() {
    FORMATSTRING="
%artist% - %title%
\n[%status%] #%position%/%playlist% %time%/%length% (%percentage%%)
\nspeed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
    formatPrint
}

main() {
    validateSocat

    # get the user defined socket before anything else
    for arg in "$@"; do

        test "$SOCKETFLAG" = "true" && {
            SOCKET=$arg
            SOCKETFLAG=false
        }

        # needed to test every option if we still want to pass '-' to the $FORMATSTRING
        case "$arg" in
            -q) QUIETFLAG=true; test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -S) SOCKETFLAG=true; test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -s) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -t) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -v) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -V) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -r) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -R) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -z) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -Z) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -P) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -p) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -m) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -l) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -L) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -k) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -h) usage 0 ;;
        esac

        test "$FORMATFLAG" = "true" && {
            FORMATSTRING="$FORMATSTRING $arg"
        }

        case "$arg" in
            -f) FORMATFLAG=true ;;
        esac
    done

    validateSocket

    while getopts "hqf:S:s:t:v:V:r:R:z:Z:PpmlLik" opt; do
        case "$opt" in
            s)  setTimeRelative $OPTARG             ;;
            t)  setTimeAbsolute $OPTARG             ;;
            v)  setVolumeRelative $OPTARG           ;;
            V)  setVolumeAbsolute $OPTARG           ;;
            r)  setTrackRelative $OPTARG; sleep 0.1 ;;
            R)  setTrackAbsolute $OPTARG; sleep 0.1 ;;
            z)  setSpeedRelative $OPTARG            ;;
            Z)  setSpeedAbsolute $OPTARG            ;;
            P)  alwaysPlay                          ;;
            p)  togglePause                         ;;
            m)  toggleMute                          ;;
            l)  toggleLoopFile                      ;;
            L)  toggleLoopPlaylist                  ;;
            k)  killProcess; QUIETFLAG=true         ;;
            \?) usage 1                             ;;
        esac
    done
           
    for arg in "$@"; do
        case "$arg" in 
            -f)  formatPrint; QUIETFLAG=true        ;;
        esac
    done

    test "$QUIETFLAG" = "true" || printStatus
}

main $ARGS
