#!/bin/sh
#
# wildefyr - 2016 (c) MIT
# control mpv remotely using JSON ipc
# https://mpv.io/manual/master/#json-ipc

ARGS="$@"

SOCKET=${SOCKET:-/tmp/mpvsocket}

usage() {
    cat << EOF
Usage: $(basename $0) [-S "socket"] [-a "filenames"] "[-f "format string"]
    -p | --toggle   : Toggle playback.
    -s | --stop     : Always stop playback.
    -P | --play     : Always start playback.
    -f | --format   : Enter a formatting string.
    -a | --add      : Add files to playlist.
    -i | --playlist : Print all filenames of tracks in current playlist.
    -t | --seek     : Increase/decrease time relative to the current time.
    -T | --time     : Set absolute time.
    -v | --vol      : Increase/decrease volume relative to the current volume.
    -V | --volume   : Set absolute volume.
    -r | --track    : Go forwards/backwards through the playlist queue.
    -R | --tracknum : Jump to playlist item number.
    -x | --speed    : Increase/decrease speed relative to the current speed.
    -X | --speedval : Set absolute speed.
    -m | --mute     : Toggle sound.
    -l | --loop     : Loop currently playing file.
    -L | --loopfile : Loop currently playing playlist.
    -z | --shuffle  : Shuffle the current playlist.
    -k | --kill     : Kill the mpv process controlling the given socket.
    -K | --killall  : Kill all mpv processes indiscriminately.
    -S | --socket   : Set socket location [default: $SOCKET].
    -q | --quiet    : Surpress all text output.
    -Q | --vid=no   : Start mpv with video output disabled.
    -h | --help     : Print this help.

Formatting:
    $(basename $0) will interpret the following delimiters if they are found:

    %filename%, %title%, %artist%, %album%, %albumartist%, %genre%, %year%
    %status%, %time%, %precisetime%, %length%, %percentage%, %speed%
    %playlistlength%, %position%, %repeat%, %single%
    %volume%, %muted%, %frame%

Exit codes:
     0: Program ran succesfully.
     1: Input Argument error.
     2: Socket does not exist.
     3: Socket is not currently open.
EOF

    test -z $1 && exit 0 || exit $1
}

    # Retrieval Functions
###############################################################################

getMediaFilename() {
    mediaFilename=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"media-title\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    mediaFilename=$(printf '%s\n' "$mediaFilename" | cut -d: -f 2 | \
        cut -d, -f 1 | sed s/\"//g)


mediaFilename=$(printf '%s\n' "${mediaFilename}" | sed "\
s/mp4&.*/mps-yt stream/
s/webm&.*/mps-yt stream/
s/3gpp&.*/mps-yt stream/
")

    printf "$mediaFilename"
}

getMetadata() {
    property=$1

    metadata=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"metadata/by-key/${property}\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    errorCheck=$(printf '%s\n' "$metadata" | cut -d\" -f 2)

    test "$errorCheck" = "error" && {
        result="N/A"
    } || {
        metadata=$(printf '%s\n' "$metadata" | cut -d: -f 2 | \
        cut -d, -f 1 | sed s/\"//g)
        result="$metadata"
    }

    # test if title has no property
    test "$property" = "title" && test "$result" = "N/A" && {
        result=$(getMediaFilename)
    }

    printf "$result"
}

getDuration() {
    duration=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"duration\"] }" | $SOCKETCOMMAND 2> /dev/null)
    duration=$(printf '%s\n' $duration | cut -d: -f 2 | cut -d. -f 1)

    printf "$duration"
}

getPercentage() {
    percentage=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"percent-pos\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    percentage=$(printf '%s\n' "$percentage" | cut -d: -f 2 |
        cut -d, -f 1 | cut -d. -f 1)

    printf "$percentage"
}

getValue() {
    property=$1
    test "$property" != "precisetime" && {
        value=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"$property\"] }" | $SOCKETCOMMAND 2> /dev/null)
        value=$(printf '%s\n' $value | cut -d\" -f 4 | cut -d. -f 1)
    } || {
        property="playback-time"
        value=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"$property\"] }" | $SOCKETCOMMAND 2> /dev/null)
        value=$(printf '%s\n' $value | cut -d\" -f 4)
    }

    test "$value" = "error" && printf "N/A" || printf "$value"
}

getSpeed() {
    speed=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"speed\"] }" | $SOCKETCOMMAND 2> /dev/null)
    speed=$(printf '%s\n' $speed | cut -d\" -f 4)
    speed=$(printf '%0.2f\n' "$speed")

    printf "$speed"
}

getMuteStatus() {
    muted=$(printf '%s\n' "{ \"command\": [\"get_property\", \"mute\" ] }" | \
        $SOCKETCOMMAND 2> /dev/null)
    muted=$(printf '%s\n' "$muted" | cut -d: -f 2 | cut -d, -f 1)

    test "$muted" = "true" && muted="yes" || muted="no"
    printf "$muted"
}

getPauseStatus() {
    status=$(printf '%s\n' "{ \"command\": [\"get_property\", \"pause\" ] }" | \
        $SOCKETCOMMAND 2> /dev/null)
    status=$(printf '%s\n' "$status" | cut -d: -f 2 | cut -d, -f 1)

    test ! -z "$status" && {
        test "$status" = "true" && {
            status="playing"
        } || {
            status="paused"
        }
    } || {
        status="N/A"
    }

    printf "$status"
}

getLoopStatus() {
    property=$1
    loop=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"$property\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    loop=$(printf '%s\n' "$loop" | cut -d: -f 2 | cut -d, -f 1 | sed s/\"//g)

    printf "$loop"
}

getFrameNumber() {
    frame=$(printf '%s\n' "{ \"command\": [\"get_property\", \
\"estimated-frame-number\" ] }" | $SOCKETCOMMAND 2> /dev/null)
    errorCheck=$(printf '%s\n' "$frame" | cut -d\" -f 2)
    frame=$(printf '%s\n' "$frame" | cut -d: -f 2 | cut -d, -f 1 | sed s/\"//g)

    test "$errorCheck" = "error" && {
        printf "N/A"
    } || {
        printf "$frame"
    }
}

# print all filenames in current playlist
getPlaylist() {
    tracks=$(getValue playlist-count)
    for i in $(${SEQCOMMAND} $tracks); do
        playlistCur=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
\"playlist/$((i - 1))/filename\"] }" | $SOCKETCOMMAND 2> /dev/null)
        playlistCur=$(printf '%s ' $playlistCur | cut -d\" -f 4)

        case "$playlistCur" in
            *.googlevideo.com/*) playlistCur="mps-yt stream " ;;
        esac

        currentTrack=$(getValue playlist-pos)

        trackNum=$i
        test "$tracks" -gt 100 && {
            test "$trackNum" -lt "10" && {
                trackNum="00$trackNum"
            }
            test "$trackNum" -lt "100" && {
                trackNum="0$trackNum"
            }
        } || {
            test "$trackNum" -lt "10" && {
                trackNum="0$trackNum"
            }
        }

        test "$currentTrack" != "N/A" && {
            test "$currentTrack" -eq $((i - 1)) && {
                allTracks="${allTracks}$(color "${playlistCur}")\n"
            } || {
                allTracks="${allTracks}$(printf "${playlistCur}")\n"
            }
        } || {
            allTracks="${allTracks}$(printf "${playlistCur}")\n"
        }
    done

    test ! -z "$allTracks" && {
        printf "$allTracks"
    } || {
        printf '%s\n' "mpv on ${SOCKET} is currently idle." >&2
    }

    exit 0
}

    # Control Functions
###############################################################################

phraseAppendTracks() {
    # find media extensions and append a newline to them
    APPENDSTRING=$(printf '%s\n' "$APPENDSTRING" | sed "
    s#.mp3 #.mp3\n#g
    s#.m4a #.m4a\n#g
    s#.aac #.acc\n#g
    s#.ogg #.ogg\n#g
    s#.flac #.flac\n#g
    s#.mp4 #.mp4\n#g
    s#.mkv #.mkv\n#g
    s#.flv #.flv\n#g
    s#.ogv #.ogv\n#g
    s#.webm #.webm\n#g
    s#.gif #.gif\n#g
    s#.png #.png\n#g
    s#.jpg #.jpg\n#g
    s#.jpeg #.jpeg\n#g
    s#--input-.*##g
    ")

    # mpv will resolve files given in a directory,
    # but I have no way of separating directories with sed at the moment

    totalFiles=$(printf '%s\n' "${APPENDSTRING}" | wc -l)
    for i in $(${SEQCOMMAND} $totalFiles); do
        appendTrack $(printf '%s\n' "${APPENDSTRING}" | sed "$i!d")
        # need slight pause to start mpv
        test "$i" -eq 1 && sleep 0.1
    done
}

appendTrack() {
    filename=$(printf '%s ' "${@}" | sed "s/.$//")

    pgrep -lf "mpv .*${SOCKET}" > /dev/null && {
        result=$(printf '%s\n' "{ \"command\": [\"loadfile\", \"$filename\", \
\"append-play\" ] }" | $SOCKETCOMMAND 2> /dev/null)
        result=$(printf '%s\n' $result | cut -d\" -f 4)
    } || {
        test "$VIDEOFLAG" = "false" && {
            exec mpv --really-quiet --no-audio-display --idle=yes --vid=no \
                --input-unix-socket=${SOCKET} "$filename" &
        } || {
            exec mpv --really-quiet --no-audio-display --idle=yes \
                --input-unix-socket=${SOCKET} "$filename" &
        }
    }

    case "$filename" in
        *.googlevideo.com/*) filename="mps-yt stream " ;;
    esac

    test "$result" = "error" && {
        printf '%s\n' "Idly adding: ${filename}"
    } || {
        printf '%s\n' "Adding: ${filename}"
    }
}

setTimeRelative() {
    time=$(getValue playback-time)
    lastChar=$(printf '%s\n' "$1" | rev | cut -c 1)

    case "$lastChar" in
        s|S|m|M|h|H)
            firstChar=$(printf '%s' "$1" | cut -c 1)
            test "$firstChar" = "-" && {
                timeInt=$(printf '%s' "$1" | cut -c 2-)
                timeInt=$(printf '%s' "$timeInt" | rev | cut -c 2- | rev)
                minusFlag=true
            } || {
                timeInt=$(printf '%s' "$1" | rev | cut -c 2- | rev)
            }

            intCheck "$timeInt"

            case "$lastChar" in
                h|H) timeInt=$((timeInt * 60 * 60)) ;;
                m|M) timeInt=$((timeInt * 60))      ;;
            esac

            test "$minusFlag" = "true" && {
                time=$((time + ${firstChar}${timeInt}))
            } || {
                time=$((time + $timeInt))
            }
            ;;
        *)
            intCheck $1
            time=$((time + $1))
            ;;
    esac


    printf '%s\n' "{ \"command\": [\"set_property\", \"playback-time\", \
$time ] }" | $SOCKETCOMMAND > /dev/null
}

setTimeAbsolute() {
    lastChar=$(printf '%s\n' "$1" | rev | cut -c 1)

    case "$lastChar" in
        s|S|m|M|h|H)
            timeInt=$(printf '%s' "$1" | rev | cut -c 2- | rev)
            intCheck $timeInt

            case "$lastChar" in
                h|H) timeInt=$((timeInt * 60 * 60)) ;;
                m|M) timeInt=$((timeInt * 60))      ;;
            esac

            time=$timeInt
            ;;
        *)
            intCheck $1
            time=$((time + $1))
            ;;
    esac

    printf '%s\n' "{ \"command\": [\"set_property\", \"playback-time\", \
$time ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeRelative() {
    intCheck $1

    volume=$(getValue volume)

    test "$volume" = "error" && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    volume=$((volume + $1))

    test $volume -lt 0 && {
         printf '%s\n' "Volume cannot be set lower than 0%" >&2
         exit 1
    }
    test $volume -gt 130 && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
\"volume\", $volume ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeAbsolute() {
    # test if media has sound
    volume=$(getValue volume)

    test "$volume" = "error" && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    intCheck $1
    volume=$1

    test $volume -lt 0 && {
        printf '%s\n' "Volume cannot be set lower than 0%" >&2
        exit 1
    }
    test $volume -gt 130 && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
\"volume\", $volume ] }" | $SOCKETCOMMAND > /dev/null
}

setSpeedRelative() {
    speed=$(getSpeed)

    fltCheck $1
    speed=$(echo "$speed+$1\n" | bc)

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
\"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

setSpeedAbsolute() {
    fltCheck $1
    speed=$1

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
\"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

setTrackRelative() {
    intCheck $1

    currentTrack=$(getValue playlist-pos)
    desiredTrack=$((currentTrack + $1))
    trackCount=$(getValue playlist-count)

    # if time is greater than 10 seconds, set time to 0
    test "$desiredTrack" -lt "$currentTrack" && {
        seconds=$(getValue playback-time)
        test "$seconds" -ge 10 && {
            setTimeAbsolute 0
            return
        }
    }
    test "$desiredTrack" -ge "$trackCount" && {
        repeat=$(getLoopStatus loop)
        test "$repeat" = "inf" && {
            desiredTrack=0
        } || {
            killSocket
        }
    }
    test "$desiredTrack" -lt 0 && {
        repeat=$(getLoopStatus loop)
        test "$repeat" = "inf" && {
            setTrackAbsolute $trackCount
            return
        } || {
            desiredTrack=0
        }
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"playlist-pos\", \
$desiredTrack ] }" | $SOCKETCOMMAND > /dev/null

    # tiny delay so printFinalOutput can catch up
    sleep 0.5
}

setTrackAbsolute() {
    intCheck $1

    currentTrack=$1
    currentTrack=$((currentTrack - 1))
    trackCount=$(getValue playlist-count)

    test "$currentTrack" -lt 0 || test "$currentTrack" -ge "$trackCount" && {
        printf '%s\n' "Item $currentTrack is out of range of playlist." >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
\"playlist-pos\", $currentTrack ] }" | $SOCKETCOMMAND > /dev/null

    # tiny delay so printFinalOutput can catch up
    sleep 0.5
}

removeTrack() {
    intCheck $1

    trackToRemove=$1
    trackToRemove=$((trackToRemove - 1))
    trackCount=$(getValue playlist-count)

    test "$trackToRemove" -lt 0 || test "$trackToRemove" -ge "$trackCount" && {
        printf '%s\n' "Item $trackToRemove is out of range of playlist." >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"playlist-remove\", \"$trackToRemove\" ] }" | \
        $SOCKETCOMMAND > /dev/null

    test "$QUIETFLAG" != "true" && {
        getPlaylist
        QUIETFLAG=true
    }
}

alwaysPlay() {
    currentTrack=$(getValue playlist-pos)
    test "$currentTrack" = "N/A" && {
        setTrackAbsolute 1
        return
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", false ] }" | \
        $SOCKETCOMMAND > /dev/null
}

alwaysPause() {
    status="true"
    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", $status ] }" | \
        $SOCKETCOMMAND > /dev/null
}

togglePause() {
    currentTrack=$(getValue playlist-pos)
    test "$currentTrack" = "N/A" && {
        setTrackAbsolute 1
        return
    }

    status=$(getPauseStatus)
    test "$status" = "playing" && status="false" || status="true"

    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", $status ] }" | \
        $SOCKETCOMMAND > /dev/null

}

toggleMute() {
    test -z $1 && {
        muted=$(getMuteStatus)
        test "$muted" = "no" && muted="true" || muted="false"
    } || {
        muted=$1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"mute\", $muted ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleLoopFile() {
    test -z $1 && {
        loopFile=$(getLoopStatus loop-file)
        test $loopFile = "no" && loopFile="inf" || loopFile="no"
    } || {
        loopFile=$1
    }

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"loop-file\", \
\"$loopFile\" ] }" | $SOCKETCOMMAND > /dev/null
}

toggleLoopPlaylist() {
    test -z $1 && {
        loopPlaylist=$(getLoopStatus loop)
        test $loopPlaylist = "no" && loopPlaylist="inf" || loopPlaylist="no"
    } || {
        loopPlaylist=$1
    }

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"loop\", \
\"$loopPlaylist\" ] }" | $SOCKETCOMMAND > /dev/null
}

shufflePlaylist() {
    printf '%s\n' "{ \"command\": [\"playlist-shuffle\" ] }" | \
        $SOCKETCOMMAND > /dev/null

    test "$QUIETFLAG" != "true" && {
        printf '%s\n' "Playlist shuffled."
        QUIETFLAG=true
    }

    test "$(getLoopStatus loop)" != "inf" && {
        toggleLoopPlaylist inf
    }
}

cropPlaylist() {
    printf '%s\n' "{ \"command\": [\"playlist-clear\" ] }" | \
        $SOCKETCOMMAND > /dev/null
    test "$QUIETFLAG" != "true" && {
        printf '%s\n' "Playlist cropped."
        QUIETFLAG=true
    }
}

clearPlaylist() {
    QUIETFLAG=true
    cropPlaylist
    removeTrack 1
    printf '%s\n' "Playlist cleared."
}

# quit mpv process on given socket
killSocket() {
    printf '%s\n' "{ \"command\": [\"quit\"] }" | $SOCKETCOMMAND > /dev/null
    exit 0
}

# kill all instances of mpv running under your user
killAllMpv() {
    pkill "mpv" 2>&1 > /dev/null
    exit 0
}

    # Time Functions
###############################################################################

elaspedTime() {
    time=$(getValue playback-time)
    formatTime $time
}

preciseElaspedTime() {
    time=$(getValue precisetime)
    bigTime=$(printf '%s\n' "$time" | cut -d. -f 1)
    tinyTime=$(printf '%s\n' "$time" | cut -d. -f 2)
    formatTime $bigTime $tinyTime
}

trackLength() {
    duration=$(getDuration)
    formatTime $duration
}

# format seconds into HH:MM:SS format
formatTime() {
    rawSeconds=$1
    seconds=$((rawSeconds % 60))
    minutes=$((rawSeconds / 60))
    hours=$((minutes / 60))

    test $seconds -lt 10 && seconds="0$seconds"
    test $minutes -ge 60 && minutes=$((minutes - hours*60))
    test $minutes -lt 10 && minutes="0$minutes"
    test $hours -lt 10 && hours="0$hours"

    test -z $2 && {
        printf '%s\n' "$hours:$minutes:$seconds"
    } || {
        milleSeconds=$2
        printf '%s\n' "$hours:$minutes:$seconds:$milleSeconds"
    }
}

    # Formatting and Printing Functions
###############################################################################

# formats and prints according to $FORMATSTRING
formatPrint() {

    # modified format string
    FORMATSTRING=$(printf '%s\n' "$FORMATSTRING" | sed "
    s#%status%#$(status=$(getPauseStatus)
    test $status = "playing" && status="paused" || status="playing"
    printf "$status")#g

    s#%year%#$(getMetadata date)#g
    s#%genre%#$(getMetadata genre)#g
    s#%title%#$(getMetadata title)#g
    s#%album%#$(getMetadata album)#g
    s#%artist%#$(getMetadata artist)#g
    s#%albumartist%#$(getMetadata album_artist)#g
    s#%speed%#$(getSpeed)#g
    s#%time%#$(elaspedTime)#g
    s#%precisetime%#$(preciseElaspedTime)#g
    s#%volume%#$(getValue volume)#g
    s#%length%#$(trackLength)#g
    s#%muted%#$(getMuteStatus)#g
    s#%percentage%#$(getPercentage)#g
    s#%filename%#$(getMediaFilename)#g
    s#%repeat%#$(getLoopStatus loop)#g
    s#%single%#$(getLoopStatus loop-file)#g
    s#%playlistlength%#$(getValue playlist-count)#g
    s#%position%#$(($(getValue playlist-pos) + 1))#g
    s#%frame%#$(getFrameNumber)#g
    ")

    printf '%s\n' "${FORMATSTRING}"
}

# print default status of mpv instance
printDefaultStatus() {
    FORMATSTRING="\
%artist% - %title%
[%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
speed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
    formatPrint
}

# catches if mpv is idle or not
printFinalOutput() {
    test "$QUIETFLAG" != "true" && {
        playlistResult=$(getPlaylist 2>&1)
        test "$playlistResult" != "mpv on ${SOCKET} is currently idle." && {
            printDefaultStatus
        } || {
            printf '%s\n' "$playlistResult"
        }
    }

    exit 0
}

    # Misc. Functions
###############################################################################

color() {
    b0='[40m'; B='[1m'; R='[0m'; I='[7m'

    cat << COLOR
$I$b0$@$R
COLOR
}

intCheck() {
    test $1 -ne 0 2> /dev/null
    test $? -ne 2 || {
         printf '%s\n' "'$1' is not an integer." >&2
         exit 1
    }
}

fltCheck() {
    testDecimal=$(echo "$1\n" | bc)
    test $testDecimal -eq 0 2> /dev/null && {
        printf '%s\n' "'$1' is not a number." >&2
        exit 1
    }
}

validateDeps() {
    type mpv 2>&1 > /dev/null || {
        printf '%s\n' "mpv is not installed on your \$PATH." >&2
        exit 4
    }
    type bc 2>&1 > /dev/null || {
        printf '%s\n' "WARNING: bc is not installed on your \$PATH." >&2
        printf '%s\n' "WARNING: speed control will not work." >&2
    }
    type socat 2>&1 > /dev/null && {
        SOCKETCOMMAND="socat - $SOCKET"
    }
    type nc 2>&1 > /dev/null && {
        SOCKETCOMMAND="nc -U -N $SOCKET"
    }
    type seq 2>&1 > /dev/null && {
        SEQCOMMAND="seq"
        return
    }
    type jot 2>&1 > /dev/null && {
        SEQCOMMAND="jot"
        return
    }

    test "${SOCKETCOMMAND}" || {
        printf '%s\n' "can not find socat or nc in your \$PATH." >&2
        exit 4
    }
    test "${SEQCOMMAND}" || {
        printf '%s\n' "can not find seq or jot in your \$PATH." >&2
        exit 4
    }
}

validateSocket() {
    test "$PLAYFLAG" != "true" && {
        # test if socket exists
        test -S $SOCKET || {
            printf '%s\n' "$SOCKET does not exist." >&2
            exit 2
        }

        # test if socket is open
        status="$(getPauseStatus)"
        test "$status" = "N/A" && {
            printf '%s\n' "$SOCKET is not currently open." >&2
            exit 3
        }
    } || {
        return
    }
}

getVersion() {
    printf '%s\n' "MPVC Release 1.2 (c) Wildefyr MIT"
    exit 0
}

main() {
    validateDeps

    # get the user defined socket before anything else
    for arg in "$@"; do
        test "$SOCKETFLAG" = "true" && SOCKET=$arg && SOCKETFLAG=false

        case "$arg" in
            -S|--socket)     SOCKETFLAG=true ;;
        esac
    done

    # main arg sort out
    for arg in "$@"; do
        case "$arg" in
            add|-a|--append) test "$FORMATFLAG" = "true" && FORMATFLAG=false ;;
            -f|--format)     test "$APPENDFLAG" = "true" && APPENDFLAG=false ;;
            -?|--*)
                test "$FORMATFLAG" = "true" && FORMATFLAG=false
                test "$APPENDFLAG" = "true" && APPENDFLAG=false
                ;;
        esac

        test "$FORMATFLAG" = "true" && FORMATSTRING="${FORMATSTRING}${arg} "
        test "$APPENDFLAG" = "true" && APPENDSTRING="${APPENDSTRING}${arg} "

        case "$arg" in
            add|-a|--append) APPENDFLAG=true ;;
            -f|--format)     FORMATFLAG=true ;;
        esac
    done

    # grab piped input if there are no args or appendstring is empty
    test -z "$APPENDSTRING" && test -p /dev/stdin && {
        while read -r line; do
            APPENDSTRING="${APPENDSTRING}${line} "
        done
    }

    # append tracks first
    test ! -z "$APPENDSTRING" && {
        phraseAppendTracks
        QUIETFLAG=true
    }

    validateSocket

    case $1 in
        play|start)
            test ! -z $2 && {
                intCheck $2
                setTrackAbsolute $2
                alwaysPlay
            } || {
                printf '%s\n' "$(getPauseStatus)"
                togglePause
                printf '%s\n' "$(getPauseStatus)"
            } ; printFinalOutput ;;
        stop)
            alwaysPause
            setTimeAbsolute 0
            printFinalOutput
            exit ;;
        volume)
            test ! -z $2 && {
                firstChar=$(printf '%s\n' "$2" | cut -c 1)
                test "$firstChar" = "+" && {
                    volume=$(printf '%s\n' "$2" | cut -d+ -f2)
                    setVolumeRelative $volume
                } || { test "$firstChar" = "-" && {
                    volume=$(printf '%s\n' "$2" | cut -d- -f2)
                    setVolumeRelative "-${volume}"
                    }
                } || {
                    setVolumeAbsolute $2
                }
            } || {
                usage 1
            } ; printFinalOutput ;;
        del)
            test ! -z $2 && {
                removeTrack $2
                getPlaylist
            } || {
                usage 1
            } ; exit ;;
        repeat)
            test ! -z $2 && {
                test "$2" = "on" && {
                    toggleLoopPlaylist inf
                } || { test "$2" = "off" && {
                    toggleLoopPlaylist no
                    }
                }
            } || {
                toggleLoopPlaylist
            } ; printFinalOutput ;;
        single)
            test ! -z $2 && {
                test "$2" = "on" && {
                    toggleLoopFile yes
                } || { test "$2" = "off" && {
                    toggleLoopFile no
                    }
                }
            } || {
                toggleLoopFile
            } ; printFinalOutput ;;
        pause)    alwaysPause         ; printFinalOutput ;;
        toggle)   togglePause         ; printFinalOutput ;;
        next)     setTrackRelative 1  ; printFinalOutput ;;
        prev)     setTrackRelative -1 ; printFinalOutput ;;
        mute)     toggleMute true     ; printFinalOutput ;;
        unmute)   toggleMute false    ; printFinalOutput ;;
        playlist) getPlaylist         ; exit ;;
        shuffle)  shufflePlaylist     ; exit ;;
        clear)    clearPlaylist       ; exit ;;
        crop)     cropPlaylist        ; exit ;;
        # seek) to implement with full MPC options # with percentage!
        # move) to implement
        # consume) to implement # add on|off toggle
        # random) MPV doesn't have this control option!
        # create an issue or implement puesdo-random tracks
        version)  getVersion          ;;
        current)  printFinalOutput    ;;
    esac

    # GNU-style options
    for arg in "$@"; do
        test "$SEEKFLAG"     = "true" && setTimeRelative "$arg";   SEEKFLAG=false
        test "$TIMEFLAG"     = "true" && setTimeAbsolute "$arg";   TIMEFLAG=false
        test "$VOLFLAG"      = "true" && setVolumeRelative "$arg"; VOLFLAG=false
        test "$VOLUMEFLAG"   = "true" && setVolumeAbsolute "$arg"; VOLUMEFLAG=false
        test "$SPEEDFLAG"    = "true" && setSpeedRelative "$arg";  SPEEDFLAG=false
        test "$SPEEDVALFLAG" = "true" && setSpeedAbsolute "$arg";  SPEEDVALFLAG=false
        test "$TRACKFLAG"    = "true" && setTrackRelative "$arg";  TRACKFLAG=false
        test "$TRACKVALFLAG" = "true" && setTrackAbsolute "$arg";  TRACKVALFLAG=false
        test "$DELETEFLAG"   = "true" && removeTrack "$arg";       DELETEFLAG=false

        case "$arg" in
            -t|--seek)      SEEKFLAG=true      ;;
            -T|--time)      TIMEFLAG=true      ;;
            -v|--vol)       VOLFLAG=true       ;;
            -V|--volume)    VOLUMEFLAG=true    ;;
            -x|--speed)     SPEEDFLAG=true     ;;
            -X|--speedval)  SPEEDVALFLAG=true  ;;
            -r|--track)     TRACKFLAG=true     ;;
            -R|--tracknum)  TRACKVALFLAG=true  ;;
            -d|--delete)    DELETEFLAG=true    ;;
            -s|--stop)      alwaysPause        ;;
            -P|--play)      alwaysPlay         ;;
            -p|--toggle)    togglePause        ;;
            -m|--mute)      toggleMute         ;;
            -i|--playlist)  getPlaylist        ;;
            -L|--loop)      toggleLoopPlaylist ;;
            -l|--loopfile)  toggleLoopFile     ;;
            -z|--shuffle)   shufflePlaylist    ;;
            -c|--crop)      cropPlaylist       ;;
            -C|--clear)     clearPlaylist      ;;
            -k|--kill)      killSocket         ;;
            -f|--format)    continue           ;;
            -a|--append)    continue           ;;
            -[1-999999])    continue           ;;
            --|---|----)    continue           ;;
            -?)             usage 1            ;;
        esac
    done

    # produce format string last
    for arg in "$@"; do
        case "$arg" in
            -f|--format)
                formatPrint
                QUIETFLAG=true
                ;;
        esac
    done

    printFinalOutput
}

for arg in $ARGS; do
    case $arg in
        --version)        getVersion      ;;
        -q|--quiet)       QUIETFLAG=true  ;;
        -Q|--vid=no)      VIDEOFLAG=false ;;
        -K|--killall)     killAllMpv      ;;
        --list-options)   usage 0         ;;
        -h|--help|h|help) usage 0         ;;
    esac
done

test "$QUIETFLAG" = "true" && {
    main $ARGS 2>&1 > /dev/null
} || {
    main $ARGS
}
