#!/usr/bin/env sh
#
# @file mpvc-tui
# @description mpvc tui, mpv terminal user interface
# @author gmt4 <gmt4 at github.com> (c) Copyright 2022.
# @url github.com/gmt4/mpvc
#

PROGNAME=$(basename "$0");
PROGVERSION=v1.0;
PROGAUTHOR=gmt4
PROGURL="https://github.com/gmt4/mpvc"
SITEURL="https://gmt4.github.io/mpvc"

equiet() { "$@" 2> /dev/null; }
oquiet() { "$@" 1> /dev/null; }
quiet()  { "$@" > /dev/null 2>&1; }

# Set TUI defaults
mpvctui_defaults()
{
    MPVC_CBLACK='\033[0;30m'
    MPVC_CRED='\033[0;31m'
    MPVC_CGREEN='\033[0;32m'
    MPVC_CGREENL='\033[1;32m'
    MPVC_CYELLOW='\033[0;33m'
    MPVC_CYELLOWL='\033[1;33m'
    MPVC_CBLUE='\033[0;34m'
    MPVC_CBLUEL='\033[1;34m'
    MPVC_CPURPLE='\033[0;35m'
    MPVC_CPURPLEL='\033[1;35m'
    MPVC_CCYAN='\033[0;36m'
    MPVC_CCYANL='\033[1;36m'
    MPVC_CWHITE='\033[0;37m'
    MPVC_CRST='\033[0m'

    # config defaults
    MPVC_COLOR0="$MPVC_CGREENL"
    MPVC_COLOR1="$MPVC_CCYAN"
    MPVC_COLOR2="$MPVC_CYELLOW"
    MPVC_UPDATEC=1
    MPVC_CLEARC=4
    MPVC_TERM=xterm
    MPVC_TIPS=true
    MPVC_SHELL=$(readlink -f /proc/$$/exe)
    export MPVC_CLINE=10
}

# Load user config
mpvctui_config()
{
    mpvctui_defaults
    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
    MPVC_CONFIG="${MPVC_CONFIG:-$XDG_CONFIG_HOME/mpvc/mpvc-tui.conf}"
    MPVC_HISTORY="${MPVC_HISTORY:-$XDG_CONFIG_HOME/mpvc/mpvc-tui.history}"
    MPVC_SCROBBLER="${MPVC_SCROBBLER:-$XDG_CONFIG_HOME/mpvc/mpvc-tui.scb}"
    # if not present, create config dir
    mkdir -p "$(dirname "$MPVC_CONFIG")"
    touch "$MPVC_HISTORY"
    # if present load user config
    if [ -r "$MPVC_CONFIG" ];
    then
        . "$MPVC_CONFIG"
    fi
    if ! quiet command -v rlwrap; then
        mpvctui_warn "$PROGNAME: Warning: No rlwrap, Install to get history, filename & completion support!"
        sleep 1
    fi
    if ! quiet command -v notify-send; then
        mpvctui_warn "$PROGNAME: Warning: No notify-send, Install to get mpv desktop notifications"
        sleep 1
    fi
}

mpvctui_warn() { echo "$@" >&2; }

# Displays "──[ $@ ]─────────────────────────────────────────────────────"
mpvctui_headerc()
{
    char="$1"; shift
    cstart="$1"; shift
    cend="$1"; shift
    ccolor="$1"; shift
    cols=$(tput cols)
    hdr="${char}${char}${cstart}$*${cend}"
    rem=$(( cols - ${#hdr} ))
    # when SHELL=/bin/dash, ${#hdr} is 4 chars smaller
    [ "$MPVC_SHELL" = "/bin/dash" ] && rem=$(( rem + 4 ))
    for _ in $(seq 1 $rem)
    do
        hdr="$hdr$char"
    done
    printf "${ccolor}${hdr}${MPVC_CRST}\n"
}

mpvctui_header0() { mpvctui_headerc '═' '[' ']' "$MPVC_COLOR0" " * $* "; }
mpvctui_header1() { mpvctui_headerc '─' '[' ']' "$MPVC_COLOR1" " + $* "; }
mpvctui_header2() { mpvctui_headerc '─' '[' ']' "$MPVC_COLOR2" " + $* "; }

mpvctui_tips()
{
    [ "$MPVC_TIPS" = "false" ] && return
    tip=$(( count % 70 ))
    case $tip in
    0|1)   echo ": type control+c to enter prompt";;
    10|11) echo ": check more tips at $PROGURL!";;
    20|21) echo ": check more tips at $SITEURL!";;
    30|31) echo ": customize theme at ${MPVC_CONFIG##$HOME/}";;
    40|41) echo ": launch from WM with: $PROGNAME -x";;
    50|51) echo ": version $PROGNAME $PROGVERSION at $PROGURL";;
    60|61) echo ": update $MPVC_UPDATEC secs refresh $((count % MPVC_CLEARC))/$MPVC_CLEARC";;
    esac
}

mpvctui_watcher()
{
    mpvctui_header0 "Running ${PROGNAME%%.sh}$(mpvctui_tips)"
    mpvctui_header1 "Status"
    mpvc status
    mpvctui_header1 "Playlist"
    mpvc playlist
    mpvctui_header1 "Prompt"
}

mpvctui_input()
{
    MPVC_PROMPT="($PROGNAME) ${PWD##*/}: "
    if quiet command -v rlwrap; then
        cmd=$(rlwrap -o -c -S "$MPVC_PROMPT" -H "$MPVC_HISTORY" -f . -P '' cat)
    else
        echo "$MPVC_PROMPT"; read -r cmd
    fi
    case "$cmd" in
        '!!'*) "${SHELL}" -c "${cmd##!!}";;
        '!'*) eval ${cmd##!};;
        'mpvc '*) QUIETFLAG=true $cmd;;
        'mpvc-tui '*) $cmd;;
        'mpvc-fzf'*) $cmd;;
        exit|quit|q) exit;;
        *) echo 'mpvc: Type commands at "mpvc:" prompt, "q" to quit';;
    esac
}

mpvctui_watch()
{
    trap mpvctui_input INT
    while :
    do
        output=$(mpvctui_watcher 2>&1)
        [ $(( count % MPVC_CLEARC )) -eq 0 ] && tput clear
        tput cup 0 0
        echo "$output"
        count=$(( count + 1 ))
        sleep $MPVC_UPDATEC
    done
}

mpvctui_notify()
{
    cmd_default='
        notify-send -u normal -i dialog-information "$(mpvc)";
        echo $(date +%s) $(mpvc g duration g path g media-title) >> '"$MPVC_SCROBBLER"

    cmd="${1:-$cmd_default}"
    awk -v cmd="$cmd" '
        /playback-restart/ {
            t=systime()
            if (t - ot > 1)
                system(cmd);
            ot=t
            print t, $0
        } '
}

mpvctui_get_media()
{
    DOWN_DIR=$HOME/Downloads/mpvc/
    url=$1

    [ -z "$url" ] && usage
    [ -z "$format" ] && format=mkv
    [ ! -d "$DOWN_DIR" ] && mkdir "$DOWN_DIR"
    file=$(echo "${url##http*://}.$format" | sed 's|/|-|')
    file="$DOWN_DIR/$file"

    # can't find a better solution at the moment
    if [ ! -e "$file" ]; then
        mpv --video=no "--stream-record=$file" "$@"
        if [ "${file##*.}" = "mkv" ]; then
            mkvpropedit "$file" --set title="$(youtube-dl --get-title "$@")"
        fi
    else
        mpvc add "$file"
    fi
}

mpvctui_usage()
{
    echo "usage: $PROGNAME -[$optflags] args # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL"
    echo "  -t : Starts the $PROGNAME to monitor the mpv playlist (rlwrap*)"
    echo "  -d : Set the WD to the media directory given as argument"
    echo "  -n : Desktop notification using notify on mpvc events (notify-send*)"
    echo "  -x : Starts $PROGNAME in a new $MPVC_TERM (config \$MPVC_TERM) [combine -x with $optflags]"
    echo "*tips: If unsure about where to begin, start with: $PROGNAME -d /path/to/media/ -T"
    exit;
}

optflags="d:g:htTm:nN:P:x"
mpvctui_main()
{
    mpvctui_config
    [ $# -eq 0 ] && mpvctui_usage
    while getopts "$optflags" flag;
    do
        case "$flag" in
        d) MPVC_DIR="$OPTARG"; cd "$MPVC_DIR" || return;;
        g) shift; mpvctui_get_media "$OPTARG" ;;
        h) shift; mpvctui_usage ;;
        t) shift; mpvctui_watch ;;
        T) shift;
                  pgrep -f "mpvc --mpv" || mpvc --mpv &
                  ( sleep 2 && mpvc --append "$@" )
                  ( sleep 1 && pgrep -f "$PROGNAME -n" || setsid "$0" -n ) &
                  mpvctui_watch
                  ;;
        m) shift; mpvctui_notify "$OPTARG" ;;
        n) shift; mpvc idleloop | mpvctui_notify ;;
        N) shift; mpvc idleloop | mpvctui_notify "$OPTARG" ;;
        x) shift; quiet command -v $MPVC_TERM && $MPVC_TERM -e "$0" "$@"; exit;;
        *) mpvctui_usage;;
        esac
    done
}

mpvctui_main "$@"
