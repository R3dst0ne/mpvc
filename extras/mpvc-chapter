#!/bin/sh
#
# @file mpvc-chapter
# @description mpvc chapter
# @author gmt4 <gmt4 at github.com> (c) Copyright 2022 MIT
# @url github.com/gmt4/mpvc
#

PROGNAME=${0##*/}
PROGVERSION="v1.4"
PROGAUTHOR=gmt4
PROGURL="https://github.com/gmt4/mpvc"

set -euf

chapter_defaults()
{
    # config defaults
    NO_COLOR="${NO_COLOR:-}"
}

# See https://ffmpeg.org/ffmpeg-formats.html#Metadata-1
chapter_file()
{
    chaptersdir="$HOME/.config/mpvc/chapters/"
    chaptersfile="$chaptersdir/$(mpvc get path | sed 's/\//-/g; s/ /_/g; s/[&]//')"
    mkdir -p "$chaptersdir"
    echo "$chaptersfile"
}

# generate a ffmpeg metadata file with chapters
# loadable with: mpvc set chapters-file chapters.txt
chapter_add()
{
    chaptersfile=$(chapter_file)

    path=$(mpvc get path)
    timepos=$(mpvc get time-pos)
    percentpos=$(mpvc get percent-pos)
    mediatitle=$(mpvc get media-title)

    if [ ! -s "$chaptersfile" ]
    then
        cat > "$chaptersfile" <<EOF
;FFMETADATA1
title=$mediatitle
;path=$path

#percent-pos=0
[CHAPTER]
TIMEBASE=1/1
START= 0
END= $timepos
title= 0 $@
EOF

    fi

    start_time=$(awk 'BEGIN{s=0} /^END= [0-9]+/ {s=$2} END{print s}' "$chaptersfile")
    end_time=$timepos
    chapter=$(awk 'BEGIN{s=0} /^title= [0-9]+/ {s=$2} END{print ++s}' "$chaptersfile")

    if [ "$#" -gt 0 ]
    then
        cat >>"$chaptersfile" <<EOF

#percent-pos=$percentpos
[CHAPTER]
TIMEBASE=1/1
START= $start_time
END= $end_time
title= $chapter $@
EOF
    fi

    #cat "$chaptersfile"
}

chapter_load()
{
    track=$(mpvc get playlist-pos)
    timepos=$(mpvc get time-pos)
    mpvc set chapters-file "$(chapter_file)"
    mpvc play "$track"
    mpvc delay set time-pos "$timepos"
}

chapter_info()
{
    echo "mpvc set chapter $(mpvc gets chapter)"
    echo "mpvc set chapters $(mpvc gets chapters)"
    echo "mpvc set ordered-chapters $(mpvc gets ordered-chapters)"
    echo "mpvc set ordered-chapters-files $(mpvc gets ordered-chapters-files)"
    echo "mpvc set chapters-file $(mpvc gets chapters-file)"
}

chapter_list_json()
{
     mpvc getr chapter-list |
         grep -o '"data":\[.*\]' | 
         sed -e 's/^"data"://;' \
             -e 's|{"title"|\n    {"title"|g;' \
             -e '/^\[\]$/ !s/]$/\n]/;'
         #    -e 's/","/", "/g; s/":/": /g'
}

chapter_list()
{
    numbered="${1:-}"
    cchapter=$(mpvc get chapter)

    chapter_list_json |
        grep -o '"title":"[^"]*' | sed 's/"title":"//;' |
        awk -v no_color="$NO_COLOR" -v numbered="$numbered" -v cchapter="$cchapter" '
        {
            chapternr = NR-1
            if (cchapter == chapternr)
            {
                if (no_color)
                {
                    if (numbered) printf("%2d  %s\n", chapternr, $0);
                    else printf("%s\n", $0);
                }
                else
                {
                    if (numbered) printf("%2d  \033[7m%s\033[0m\n", chapternr, $0);
                    else printf("\033[7m%s\033[0m\n", $0);
                }
            }
            else
            {
                if (numbered) printf("%2d  %s\n", chapternr, $0);
                else printf("%s\n", $0);
            }
        }'
}

chapter_next()
{
    chapter=$(mpvc get chapter)
    chapters=$(mpvc get chapters)
    chapter_set $(( ( chapter + 1 )  % chapters ))
}

chapter_prev()
{
    chapter=$(mpvc get chapter)
    chapters=$(mpvc get chapters)
    chapter_set $(( ( chapter - 1 )  % chapters ))
}

chapter_set()
{
    chapters=$(mpvc get chapters)
    if [ "$chapters" -eq 0 ]; then return; fi
    mpvc set "chapter" "$1"
}

chapter_replay()
{
    chapter_set "$(mpvc gets chapter)"
}

chapter_search()
{
    chapter_list | awk "/$*/ {print NR-1; exit}"
}

chapter_search_play()
{
    chapter=$(chapter_search "$@")
    if [ -z "$chapter" ]; then return; fi
    mpvc set "chapter" "$chapter"
}

chapter_status()
{
    mpvc cmd expand-text '${chapter} (${=chapter:NA}/${chapters:NA})'
}

usage()
{
    echo "usage: $PROGNAME args # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL"
    echo "  status    : Show chapters status"
    echo "  list      : List chapters (property chapter-file)"
    echo "  info      : Show chapters info"
    echo "  file      : Show current ffmetadata chapter-file"
    echo "  load      : Load current ffmetadata chapter-file"
    echo "  add       : Add new chapter to current ffmetadata chapter-file"
    echo "  play      : Play the given chapter number (property chapter)"
    echo "  replay    : Replay the current chapter number (property chapter)"
    echo "  next      : Jump to next chapter (property chapter)"
    echo "  prev      : Jump to prev chapter (property chapter)"
    echo "  search    : Search the chapterlist."
    echo "  searchplay: Search the chapterlist and play the first match."
    exit;
}

main()
{
    chapter_defaults
    if [ $# -lt 1 ]; then usage; fi

    case "$1" in

    -i | list)       shift; chapter_list "numbered" "$@";;
    -I | listnum)    shift; chapter_list "numbered" "$@";;
    -c | search)     shift; chapter_search "$@";;
    -C | searchplay) shift; chapter_search_play "$@";;

    json)   shift; chapter_list_json "$@";;
    file)   shift; chapter_file "$@";;
    load)   shift; chapter_load "$@";;
    add)    shift; chapter_add "$@";;
    info)   shift; chapter_info "$@";;
    next)   shift; chapter_next "$@";;
    prev)   shift; chapter_prev "$@";;
    play)   shift; chapter_set "$@";;
    replay) shift; chapter_replay "$@";;
    status) shift; chapter_status "$@";;
    help) usage;;
    *) usage;;
    esac
}

main "$@"
